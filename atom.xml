<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ocean&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/7038fb0b9324e733a63339dc346f69f2</icon>
  <subtitle>有朝一日刀在手，斩遍天下恩爱狗！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://oceanmiki.github.io/"/>
  <updated>2022-06-23T08:01:16.851Z</updated>
  <id>http://oceanmiki.github.io/</id>
  
  <author>
    <name>冷亚麻色的？</name>
    <email>976626892@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>百度实习总结</title>
    <link href="http://oceanmiki.github.io/2022/06/23/%E7%99%BE%E5%BA%A6%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://oceanmiki.github.io/2022/06/23/%E7%99%BE%E5%BA%A6%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2022-06-23T06:53:09.666Z</published>
    <updated>2022-06-23T08:01:16.851Z</updated>
    
    <content type="html"><![CDATA[<p>岁月如梭，实习结束已过去大半年之久，好不容易忙完学校毕业的事情，才闲下心来记录实习的经历</p><a id="more"></a><h1 id="认识新朋友"><a href="#认识新朋友" class="headerlink" title="认识新朋友"></a>认识新朋友</h1><p>2021.7.7是报到的第一天，我跟着行政人员转来转去，终于看到了在工位等我的向蔚姐姐和蛋总（姐姐），我把背包放在临时工位之后就跟着两个姐姐一起去食堂吃午饭。到了晚上，我、向蔚姐姐、刘艺姐姐、时安然姐姐以及黄琴姐姐一起去吃饭，这也是之后固定的饭友团了。我在实习期间一直被带着吃饭，也就有了每天的固定对话 “吃饭” “走”（还有英文版“fan” “go”）有时候在食堂吃，有时候去外面吃（一般是麻辣烫和米线二选一）</p><p>实习了俩星期后，我坐的临时工位旁边又迎来了一位新同事，侯庭飞。</p><h1 id="有趣的团建"><a href="#有趣的团建" class="headerlink" title="有趣的团建"></a>有趣的团建</h1><p>短短小半年时间，我参加了两次团建，第一次是部门的团建，去的北京香山公园，第二次是团队的团建，去的是环球影城。</p><h2 id="香山公园"><a href="#香山公园" class="headerlink" title="香山公园"></a>香山公园</h2><h2 id="环球影城"><a href="#环球影城" class="headerlink" title="环球影城"></a>环球影城</h2><h1 id="日常的工作"><a href="#日常的工作" class="headerlink" title="日常的工作"></a>日常的工作</h1><p>每天到工位先看两篇扇贝阅读醒醒脑子（后来起不来那么早，就荒废了）。之后，刷LeetCode每日一题，如果是easy就再加一道，如果是没做过的mid就看题解，如果是hard就摆烂。然后去休息区泡一杯花茶，打开电脑上内网浏览最近公司的新闻，在寻Ta专区中看看又有哪些“交友”的帅哥美女，顺便逛逛二手交易区的新上架商品。等到11:30去吃饭，吃完饭后绕着公司转几圈，12:30返回工位玩会手机，戴上耳塞睡觉睡到14:00。睡醒后带薪上洗手间（后来我发现这个点特别多人，所以我就提前5分钟去），上完洗手间后，开始学习，正所谓笨鸟先飞，阅读《鸟哥的linux私房菜》、《图解HTTP》等电子书，中途找个机会去休息区洗下午发的水果吃，顺便聊会天。等到17:30吃晚饭，吃完饭绕着公司转几圈，18:30回到工位玩会手机。19:00思考今天的日报怎么写，写完之后定时21:30发送。最后打开知乎指点江山，激扬文字。21:00准时预约打车回学校。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;岁月如梭，实习结束已过去大半年之久，好不容易忙完学校毕业的事情，才闲下心来记录实习的经历&lt;/p&gt;
    
    </summary>
    
    
      <category term="工作" scheme="http://OceanMiki.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="总结" scheme="http://OceanMiki.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>picture</title>
    <link href="http://oceanmiki.github.io/2021/06/30/picture/"/>
    <id>http://oceanmiki.github.io/2021/06/30/picture/</id>
    <published>2021-06-30T12:40:28.000Z</published>
    <updated>2021-06-30T13:54:24.402Z</updated>
    
    <content type="html"><![CDATA[<p>上传了一张图片</p><a id="more"></a><h1 id="这是一个标题"><a href="#这是一个标题" class="headerlink" title="这是一个标题"></a>这是一个标题</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/picture/张伟请坐.jpg" alt="这是一张图片" title="">                </div>                <div class="image-caption">这是一张图片</div>            </figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>图片直接拖进typora，会自动保存在<code>/source/images/blog_name</code>下</li><li>记得在typora中格式—&gt;图像—&gt;设置图片根目录为source</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上传了一张图片&lt;/p&gt;
    
    </summary>
    
    
      <category term="deploy" scheme="http://OceanMiki.github.io/categories/deploy/"/>
    
    
      <category term="test" scheme="http://OceanMiki.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>暑期实习面经汇总</title>
    <link href="http://oceanmiki.github.io/2021/06/12/%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/"/>
    <id>http://oceanmiki.github.io/2021/06/12/%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/</id>
    <published>2021-06-12T14:26:56.379Z</published>
    <updated>2021-06-20T14:23:43.590Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下咸鱼的找实习经历</p><a id="more"></a><h1 id="美团后端（一面挂）"><a href="#美团后端（一面挂）" class="headerlink" title="美团后端（一面挂）"></a>美团后端（一面挂）</h1><ul><li>笔试5道a了两道，第三道80%case，5.12一面</li></ul><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><ol><li>post与get的区别？</li><li>http和https的区别？</li><li>http的三次握手？</li><li>cookie和session的区别？它们会过期吗？如果故意修改cookie有什么影响？怎么防止这种问题的出现？</li></ol><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ol><li>除了课程设计你有用过数据库里面的索引吗？</li><li>为什么要用索引？索引是怎么提升查询效率的？</li><li>hash索引和b+树索引的区别？</li><li>b数和b+树的区别？b+树为什么就比b树存储的信息多？</li></ol><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><ol><li><p>产生死锁的必要条件？</p></li><li><p>解决死锁的方法？</p></li></ol><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><ol><li><p>了解hashmap吗？hashmap为什么初始化长度是2的幂次方？</p></li><li><p>hashmap和concurrenthashmap的区别？为什么说hashmap是线程不安全的？concurrenthashmap是怎么解决线程不安全的？</p></li><li><p>synchronize属性和synchronize方法有什么区别？</p></li></ol><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><ol><li><p>求一个大数据集里面前k个最大的数？</p></li><li><p>求一个大数据集里面前k个出现次数最多的数？</p></li></ol><h1 id="最右视频（一面挂）"><a href="#最右视频（一面挂）" class="headerlink" title="最右视频（一面挂）"></a>最右视频（一面挂）</h1><h4 id="扯淡"><a href="#扯淡" class="headerlink" title="扯淡"></a>扯淡</h4><ol><li><p>先自我介绍一下吧。</p></li><li><p>你第一个项目是深度学习的，我对这方面是个外行，你怎么向我介绍这个东西？</p></li><li><p>你第二个项目是前端开发，能说说都用到什么技术吗？说了HTML网页+echarts图表，用JavaScript写的，数据是自己模拟的（因为甲方没给数据。面试官说就是都是死数据咯。我又补充如果有数据我们也可以使用mybatis传？面试官眼前一亮，你现在是使用了mybatis了？（回答还没。。。尬住了</p></li><li><p>你这两个项目都不是完全是测试的，那你说你熟悉测试理论，能说说都知道什么理论吗？（随便答了两句黑盒白盒，等价类划分，正等着面试官深入问，结果直接说可以了，下一题？内心os：等等，我还没描述黑白盒测试的区别，还没介绍单元测试、集成测试、系统测试、回归测试</p></li><li><p>我给你一个场景，有一份工作量是5天的任务，老板要你2天做完，你怎么办？</p></li><li><p>遇到技术难点怎么办？</p></li><li><p>老板给你指定一个同学（同事，笑），你去向他请教，你会怎么请教？</p></li><li><p>你觉得你的社交能力怎样？实习有一个团队一起协作，你作为一个新人怎么融入？</p></li><li><p>你觉得你的抗压能力怎样？</p></li><li><p>你的职业规划是什么？</p></li><li><p>你都面试了哪些公司？（说算上这次是第二次）就继续问说说你上一家，我说是美团，又继续问面的是测试还是开发，我说也是测试开发。最后问了一嘴美团都面了什么内容。（其实是我自己脑补，自顾自答得。。。</p></li><li><p>你觉得测试是干嘛的？为什么选择测试？你有投过开发吗？为什么不选开发？</p></li><li><p>大概什么时候到岗？能工作多长时间？</p></li></ol><h4 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h4><ol><li>更加熟悉哪门语言？java还是python？（答java，感觉面试官顿了一下，沉吟一声就开始了</li><li>接口和抽象方法的区别？</li><li>ArrayList和LinkedList的区别？</li><li>用过什么linux命令</li><li>说一下原子性？</li><li>数据库事务的四大特性？（刚刚说的原子性算一个、半天憋出一个隔离性，实在不好意思，面试官还安慰我说基础概念确实，没关系。</li><li>java八大基础类型，（平时匆匆扫一眼的恶果，漏了short、long、byte，看我说到Boolean像是忘了，面试官直接说可以了（哈哈哈~嗝</li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>语言组织得不太好，磕磕绊绊，还是面得少了。</li><li>思路前后逻辑最好能够统一，不要紧张，冷静梳理1、2、3点再好好回答。</li><li>争取一次性把自己想说的都说完，这次面试官没怎么深入问，估计是觉得我只能答上那些，很多问题还没来得及展开就被说“可以了”，ε=(´ο｀*)))唉，下次一定学着引导展开，不然不是白白准备了吗。。</li><li>以为一面会有很多技术的问题，但可能觉得我项目经历太过简单，也没什么好问的。问了一大堆我没想过的那种问题</li><li>感觉是刷KPI的？</li></ol><h1 id="纷享销客一面"><a href="#纷享销客一面" class="headerlink" title="纷享销客一面"></a>纷享销客一面</h1><ol><li>先自我介绍一下</li><li>没问项目</li><li>你说你选修了软件测试这门课程，输出了相关的文档，那么你都用到哪些测试方法呢？</li><li>更倾向做简单的黑盒测试还是喜欢有技术挑战一点的工作？</li><li>git熟悉吗？怎么用的？</li><li>linux都用到了哪些命令？</li><li>对于日志文件有没有筛选？怎么筛选的？</li><li>对于单元测试，除了Junit还用过别的框架吗？（面试官说工作用的tensor什么的，大同小异</li><li>java和python哪个更熟悉？</li></ol><h4 id="部门情况"><a href="#部门情况" class="headerlink" title="部门情况"></a>部门情况</h4><ol><li>不只是测试，不是简单的点点点，也有开发，要写代码</li><li>工作性质：可以选择到业务部门了解，也可以直接来就上手干，跟我干</li><li>偏底层，关于接口测试，（我：集成测试？他：可以这么理解</li><li>微服务开发的内容</li></ol><h4 id="反问"><a href="#反问" class="headerlink" title="反问"></a>反问</h4><ol><li>您对我这次面试怎么评价？（虽然没深入问技术，但挺好的，基础好，值得培养</li><li>大概多久能接到面试结果通知？（结果其实已经回答我了，很快会电话通知我二面，是主管面</li><li>为了应对接下来的面试和实习，我该怎么准备？（简历写的东西加强一下，sql语句必考连表查询之类的多准备一下，算法题刷题就完事了，代码能力加强一些，可以自己做一些微服务的东西。</li></ol><h1 id="纷享销客二面（offer）"><a href="#纷享销客二面（offer）" class="headerlink" title="纷享销客二面（offer）"></a>纷享销客二面（offer）</h1><h4 id="QA面试官估计是忘了我，等了10min打了个电话，然后全程用手机视频面"><a href="#QA面试官估计是忘了我，等了10min打了个电话，然后全程用手机视频面" class="headerlink" title="QA面试官估计是忘了我，等了10min打了个电话，然后全程用手机视频面"></a>QA面试官估计是忘了我，等了10min打了个电话，然后全程用手机视频面</h4><ol><li>自我介绍？</li><li>对测试了解？</li><li>更愿意做白盒还是黑盒？</li><li>接口测试做过吗？（postman测过百度翻译接口，当时是面完一面之后百度了接口测试，跟着博客试了一下</li><li>针对你的百度翻译接口测试，设计测试用例？</li><li>你都是站在用户角度设计的，有考虑过开发人员的测试用例吗？</li><li>有什么想问的？</li></ol><h1 id="百度一面，50min"><a href="#百度一面，50min" class="headerlink" title="百度一面，50min"></a>百度一面，50min</h1><ol><li>自我介绍</li><li>问项目，没什么好问的，尬聊</li><li>linux命令介绍一下</li><li>linux查找cpu占用前五的进程？</li><li>把文本内容aa全部替换成bbb</li><li>数据库：查找平均分大于60的学生及其成绩，查找倒数第三个入职的员工信息</li><li>从点击一个网页到显示的全过程？</li><li>get和post的区别？</li><li>cookie和session的区别？</li><li>查找两个链表第一个相同结点？</li><li>判断链表是否有环？</li><li>测试的理解？</li><li>听说过测试金字塔吗？</li><li>有什么想问的？</li></ol><h1 id="百度二面，50min"><a href="#百度二面，50min" class="headerlink" title="百度二面，50min"></a>百度二面，50min</h1><ul><li>6.11（周五）下午2点面的，接下来的周六、日、一是端午节</li></ul><ol><li>自我介绍</li><li>共享屏幕，直接写代码：一个文件里面有学生的信息：学号、姓名和年龄。你写java代码，对学生进行去重和排序处理，然后连接数据库，将每个学生的信息插入。（15min</li><li>写完了，讲一下，如果你对刚刚这个功能进行测试，你会怎么测？</li><li>tcp和udp区别？tcp具体怎么保证可靠性（又问了很多计算机网络的知识，感觉很喜欢问计网</li><li>linux查找日志中出现次数最多的10个ip地址？用到了哪些命令？（cat、sort、head、|…)</li><li>你今天下午还有课吗？（答没有，原来是面完10min后打电话约三面</li><li>有什么想问的？</li><li>我投的是测试开发吧？（因为发给我的二面链接写的后台开发，同时问的问题太过诡异</li><li>工程效能部是干什么的？</li><li>我能学到什么？</li></ol><h1 id="百度三面，40min"><a href="#百度三面，40min" class="headerlink" title="百度三面，40min"></a>百度三面，40min</h1><ol><li>自我介绍一下</li><li>二面面试官都问你什么了？</li><li>又问了一些，但是忘了</li><li>网络、操作系统都问的差不多了，我们做道题吧，查找最长无重复子串（写了快20 min，紧张</li><li>你有什么想问的？</li></ol><h1 id="百度四面（offer）"><a href="#百度四面（offer）" class="headerlink" title="百度四面（offer）"></a>百度四面（offer）</h1><ul><li>PS：前面三面都是视频面，我以为这次电话面应该是hr了吧，聊着聊着不对劲</li></ul><ol><li>同学你好，前面的面试官说你不错，你感觉怎么样？</li><li>还在北京上学是吗？大三？考研吗？</li><li>最快入职时间？能实习多久？（暑假一周5天没问题，面试官说大四开学后根据课程调整也是可以的，我说我下学期就一节课，不需要调整hhh</li><li>能保证6个月以上实习吗？（我说能，顺便探探口风，看能不能转正，说有很大机会，我也表示我也希望实习久点balabala</li><li>家里人知道实习，支持吗？学校支持吗？</li><li>建议我多学校老师沟通（这里不是很懂，是有传闻交大的老师不放人吗？我解释说老师很支持，暑期课程就有用实习抵学分的。</li><li>你学习过程中有遇到什么困难吗？怎么解决的？</li><li>和同学关系怎么样？（因为我上一个问题说问身边的dalao</li><li>然后话题陡然一转，你java怎么学的？</li><li>python怎么学的？掌握情况如何？</li><li>面试官介绍了一下部门的情况，说会比较多使用python</li><li>数据库平时有用吗？怎么用的？</li><li>了解主从同步吗？（？？？后面还有一些问题我忘了，我已经神志不清了</li><li>你有什么想了解的？</li><li>实习生在部门日常工作都干些什么？</li><li>百度里面培养体系如何？</li><li>面试结果？</li><li>这里他说他也是技术人员，主要是打电话了解情况，说具体入职时间、待遇等hr通知</li><li>最后面试官祝我端午节快乐（我说今天怎么连着面，原来是端午节等下班没事干2333</li><li>我说：端午节快乐！88</li><li>面完快下午5点，出去吃个饭，拿个快递，回宿舍后不久（7点多）收到hr电话</li></ol><h1 id="字节一面，50min"><a href="#字节一面，50min" class="headerlink" title="字节一面，50min"></a>字节一面，50min</h1><ol><li>自我介绍</li><li>项目</li><li>大创项目遇到什么困难怎么解决的？</li><li>数据库用过吗？（MySQL</li><li>怎么查找一张表中的前10条记录（limit</li><li>索引用过吗？（说用过b+树和hash，面试官根本不理我，也没有顺着问</li><li>主键和索引区别？唯一索引听过吗？</li><li>删除一张表有用过吗？</li><li>delete、drop、truncate的区别？</li><li>事务知道吗？</li><li>了解数据库引擎吗innoDB还有my…my…my（似乎想等我补充，我保持微笑，空气凝固半天后，我说我不知道myISAM</li><li>操作系统了解吗？</li><li>使用命令查找一个叫a的文件中所有“中国”字段？</li><li>使用命令将文件a中所有“中国”替换成“北京”？</li><li>进程和线程区别？</li><li>并行和并发区别？</li><li>我为什么能够一边写代码，一边视频面试，甚至还能同时听歌？</li><li>网络了解吗？</li><li>tcp和udp区别？</li><li>为什么tcp可靠？</li><li>流量控制是什么？拥塞控制是什么？</li><li>cookie和session区别？</li><li>状态码了解吗？200？404？302？301？500？</li><li>http和https区别？SSL协议了解吗？说一下实现原理。</li><li>输入网址按下回车到网页展示的过程？</li><li>java比较熟悉？用过String吗？StringBuffer、StringBuilder区别？</li><li>String为什么是不可变的？源码看过吗？</li><li>StringBuffer为什么是线程安全的？</li><li>垃圾回收了解吗？说一下jvm？</li><li>做两道算法题？</li><li>判断数字是否是回文数字？</li><li>合并重叠区间（用的贪心</li></ol><h1 id="字节二面，60min"><a href="#字节二面，60min" class="headerlink" title="字节二面，60min"></a>字节二面，60min</h1><ul><li>面试官黑眼圈比我还重，我很担忧…</li></ul><ol><li>自我介绍</li><li>简单讲一下你写的web页面？数据写死的吗？</li><li>前后端的项目有吗？（答数据库课程设计</li><li>怎么做的？（仿美团的</li><li>对于前端页面无法正确显示（例如空白页）你都怎么排查？</li><li>用到什么接口？接口传参有了解吗？（必传和非必传</li><li>入参校验有做过吗？</li><li>http接口用过吗？</li><li>url发送一个请求，请求接口有了解吗？（很喜欢问接口呀</li><li>解析URL？</li><li>tcp连接？</li><li>https了解吗？</li><li>get和post区别？</li><li>怎样屏蔽网络，不让某些人访问一些特定的网站？除了使用防火墙，根据你学的网络知识还有别的方法吗？</li><li>jvm了解吗？垃圾回收机制？内存模型？</li><li>内存溢出了解吗？一般报什么错误？故障排查？</li><li>评价一下你的数据库水平？</li><li>了解Redis吗？</li><li>连表查询？left join、right join、inner join区别？</li><li>线程的一个问题（听都没听懂），说可以多了解一下</li><li>常用linux命令？（重定向</li><li>筛选日志信息，把info、void字段去掉，只保留错误信息？</li><li>测试一个水杯？（xxx，还有吗？xxx，还有吗？xxx，还有吗？面试官最后补充了兼容性测试</li><li>你说你对软件测试感兴趣，能具体说说吗？你认为测试是做什么的？</li><li>做道编程题？（好..</li><li>删除链表倒数第k个节点并返回头结点？</li><li>牛客网提交不了（面试结束后和牛客客服排查，发现是我这个智障写了两个public类，牛客输入输出的模式还是不熟悉，下次不刷LeetCode了，直接acm搞起</li><li>一边等客服回复，一边和面试官讨论算法边界问题，怎么做特判（链表为空？k比链表长度大？只有一个节点？k恰好等于链表长度？</li><li>（这是在我反问之后问的几个问题：场面一度很混乱</li><li>等等，我帮hr问几个问题：考研吗？</li><li>暑期实习还是长期实习？</li><li>能全勤实习吗？</li></ol><h4 id="反问-1"><a href="#反问-1" class="headerlink" title="反问"></a>反问</h4><ol><li>应该不是测试，还是测试开发？（对滴</li><li>什么部门？（中台</li><li>平时工作内容？（白盒，有访问开发代码的权限，进行代码检查，语句覆盖——)优化</li></ol><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ol><li><p>面足一个小时，虽然很多东西我都不知道（逃…</p></li><li><p>字节一面和二面都会记录，区别是一面面试官经常敲键盘半天，二面感觉虽然也在记录，但是面试过程很丝滑，没有那种长时间的卡顿，很舒服。</p></li><li><p>这次面试体验很好，我发现一个有趣的现象，字节的面试喜欢层层递进。（虽然深入问我就不会了…</p></li><li><p>问问题还会先问一下你对这方面的了解情况，经常是：你对xxx了解如何？然后据此扒拉一会再问，估计是内部题库（好想要一份…</p></li><li><p>很会引导，应该是我目前遇到最会问问题的了，在我卡壳时还帮我梳理思路，很感谢！</p></li><li><p>面试官有时候嘴瓢，然后自己笑一下。我觉得还挺好看的，就顺手截了个图。</p></li><li><p>晚上快7点时hr通知三面</p></li></ol><h1 id="字节三面，50min"><a href="#字节三面，50min" class="headerlink" title="字节三面，50min"></a>字节三面，50min</h1><ul><li>晚上还有考试，难顶</li></ul><ol><li>自我介绍</li><li>为什么对测试感兴趣？具体点，再具体点，我还是不理解怎么这就能说明你感兴趣了？</li><li>淘宝为什么只登陆一次就后续不用再登陆？用到什么技术？</li><li>sessionID怎么来的？怎么就生成了？</li><li>就当现在生成了，怎么发送的？从哪发？发到哪里？</li><li>服务器怎么存储的？</li><li>换个问题，你买过火车票吗？</li><li>哪到哪？（北京到珠海</li><li>现在要查询北京到珠海的列车号，出发站还有终点站，你怎么做？</li><li>你说查数据库，怎么查？</li><li>你这只能查从北京始发，珠海终点的，经停站有北京和珠海的火车也要查询出来，怎么做？</li><li>你数据库的表怎么定义的？表都没有你就查了？</li><li>你说把全国所有城市两两组合，全国有多少个城市？（顺口说了34，结果被说34那是省份hhh</li><li>就当每个省20个城市，C{600，2}有上万种可能，你觉得效率怎样？</li><li>你说对数据预处理，怎么处理，别光靠猜啊？</li><li>换个问题，ipv4地址知道吗？</li><li>为什么要划分A、B、C？还有D、E吗？</li><li>反正ip地址是唯一的，全世界区分开不就好咯？划分来干嘛？</li><li>写一个程序，判断输入字符串是否是ipv4地址？</li></ol><h4 id="反问-2"><a href="#反问-2" class="headerlink" title="反问"></a>反问</h4><ol><li>部门？（电商、直播带货</li><li>面试欠缺的，未来学习方向？（无可奉告，还补充说是hr强调不能说这方面</li></ol><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><ul><li>Talk is cheep, show me your code.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下咸鱼的找实习经历&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://OceanMiki.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="算法" scheme="http://OceanMiki.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据库" scheme="http://OceanMiki.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="计网" scheme="http://OceanMiki.github.io/tags/%E8%AE%A1%E7%BD%91/"/>
    
      <category term="操作系统" scheme="http://OceanMiki.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://oceanmiki.github.io/2020/04/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://oceanmiki.github.io/2020/04/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-04-16T04:08:42.904Z</published>
    <updated>2020-04-16T13:26:57.429Z</updated>
    
    <content type="html"><![CDATA[<p>还记得第一次在知乎上看到正则表达式，看了半天都只是学了些皮毛，还转眼就忘。今天看了廖雪峰老师的教程，总结一下。</p><a id="more"></a><h1 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h1><h4 id="字符表示"><a href="#字符表示" class="headerlink" title="字符表示"></a>字符表示</h4><ul><li>特殊字符需要转义 <code>&quot;a\&amp;b&quot;</code> 由于Java中 \ 也需要转义，所以要写成 <code>&quot;a\\&amp;b&quot;</code> 不确定是否需要转义的加上双斜杠总没错。（下面不再重复说明）    </li><li>对于非 <strong>Ascll</strong>  字符（例如中文）用16进制表示，例如 <code>&quot;a\\u548cc&quot;</code> 匹配 “a和c”</li><li>小数点 “.” 用来匹配任一字符，但该匹配位置必须有一个字符，不能为空。注意：小数点前不要加双斜杠进行转义，否则只能匹配小数点 “.” 这个字符</li><li>“\\d” 匹配 “0~9” 的一个数字</li><li>“\\w” 匹配一个字母、一个数字或一个下划线”_”</li><li>“\\s” 匹配一个空白字符（一个空格或一个Tab即“\t”）</li><li>“\\D” 匹配一个非数字，同理 “\\W” 匹配一个非 “\\w”、”\\S” 匹配一个非 “\\s”</li></ul><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><ul><li>星号 * 修饰在它前面的字符，匹配任意个数（包括0）的该字符</li><li>加号 + 修饰它前面的字符，匹配至少一个（不包括0）个数的该字符</li><li>问号 ? 修饰它前面的字符，匹配 1 个或 0 个该字符</li><li>{n} 修饰它前面的字符，匹配 n 个该字符</li><li>{n,m} 修饰它前面的字符，匹配 n 到 m 个该字符</li><li>{n,} 修饰它前面的字符，匹配至少 n 个该字符</li><li>{0,n} 修饰它前面的字符，匹配至多 n 个该字符</li></ul><h1 id="分组匹配规则"><a href="#分组匹配规则" class="headerlink" title="分组匹配规则"></a>分组匹配规则</h1><h4 id="使用小括号进行分组"><a href="#使用小括号进行分组" class="headerlink" title="使用小括号进行分组"></a>使用小括号进行分组</h4><h4 id="正则表达式字符串编译为-Pattern-对象"><a href="#正则表达式字符串编译为-Pattern-对象" class="headerlink" title="正则表达式字符串编译为 Pattern 对象"></a>正则表达式字符串编译为 Pattern 对象</h4><p>反复使用一个正则表达式字符串进行快速匹配效率较低</p><h4 id="使用Match-group-n-快速提取子串"><a href="#使用Match-group-n-快速提取子串" class="headerlink" title="使用Match.group(n)快速提取子串"></a>使用Match.group(n)快速提取子串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配一个24小时形式的时间</span></span><br><span class="line">Pattern pattern = Pattern.compile(<span class="string">"^([0-1][0-9]|[2][0-3]):([0-5][0-9])$"</span>);</span><br><span class="line">      Matcher matcher = pattern.matcher(<span class="string">"20:27"</span>);</span><br><span class="line">      <span class="keyword">if</span>(matcher.matches())&#123;</span><br><span class="line">          String whole = matcher.group(<span class="number">0</span>); <span class="comment">//0表示获取全部匹配的字符串</span></span><br><span class="line">          String hour = matcher.group(<span class="number">1</span>); <span class="comment">//1表示获取匹配的第一个小括号包着的字符串</span></span><br><span class="line">          String min = matcher.group(<span class="number">2</span>); <span class="comment">//2表示获取匹配的第二个小括号</span></span><br><span class="line">          </span><br><span class="line">          System.out.println(<span class="string">"whole: "</span> + whole);<span class="comment">//20:27</span></span><br><span class="line">          System.out.println(<span class="string">"hour: "</span> + hour);<span class="comment">//20</span></span><br><span class="line">          System.out.println(<span class="string">"min: "</span> + min);<span class="comment">//27</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>多说两句，这里Pattern里的 “^” 表示从头开始匹配，“$” 表示到这里匹配结束，由于Java中默认单行匹配，因此可写可不写。<del>（所以不写）</del></p><h1 id="复杂匹配规则"><a href="#复杂匹配规则" class="headerlink" title="复杂匹配规则"></a>复杂匹配规则</h1><ul><li>竖线 “|” 是 “或” 的意思</li><li>“[…]” 匹配中括号 [] 范围内的字符，且只能匹配其中一个。例如：[ac] 匹配一个 a 或 c、 [0-5] 匹配一个范围在 0 到 5 之间的数字</li><li>拓展一下，”[a-f0-9]{6}” 匹配16进制表示的颜色，当然也可以写成 “([0-9]|[a-f]){6}”，</li><li>[^…] 匹配非范围内的字符</li></ul><h1 id="非贪婪匹配"><a href="#非贪婪匹配" class="headerlink" title="非贪婪匹配"></a>非贪婪匹配</h1><p>正则表达式默认使用贪婪匹配，即尽可能多的向后匹配</p><h4 id="使用问号-实现非贪婪匹配"><a href="#使用问号-实现非贪婪匹配" class="headerlink" title="使用问号 ? 实现非贪婪匹配"></a>使用问号 ? 实现非贪婪匹配</h4><p>注意区分 “\\d??”，第一个问号表示匹配 0 个或 1 个数字，第二个问号表示非贪婪匹配，所以合起来就是匹配 0 个数字</p><h1 id="搜索和替换"><a href="#搜索和替换" class="headerlink" title="搜索和替换"></a>搜索和替换</h1><h4 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h4><ul><li>单个空格 <code>String[] arr = &quot;a b c&quot;.split(&quot;\\s&quot;)</code> </li><li>如果其中使用一个或多个空格分隔，改为 “\\s+” 即可</li><li>如果其中还使用逗号 “,” 、分号 “;” 等其他字符分隔，还可以进一步改写成 “[\\s\,\;]+”</li></ul><h4 id="搜索字符串"><a href="#搜索字符串" class="headerlink" title="搜索字符串"></a>搜索字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"Happiness is a way station between too much and too little."</span>;</span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">"\\w+a\\w+"</span>);</span><br><span class="line">        Matcher matcher = pattern.matcher(s);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            String sub = s.substring(matcher.start(), matcher.end());</span><br><span class="line">            System.out.println(sub);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到英文句子中所有包含字母a的单词</span></span><br><span class="line">Happiness</span><br><span class="line">way</span><br><span class="line">station</span><br></pre></td></tr></table></figure><h1 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h1><p>1、将多个空格替换成一个空格，更符合英文句子规范</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"Happiness    is  a way     station   between too much   and too          little."</span>;</span><br><span class="line">      String s1 = s.replaceAll(<span class="string">"\\s+"</span>, <span class="string">" "</span>);</span><br><span class="line">      System.out.println(s1);</span><br></pre></td></tr></table></figure><p>2、给每个单词加粗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s2 = s1.replaceAll(<span class="string">"(\\w+)"</span>, <span class="string">"&lt;b&gt;$1&lt;/b&gt;"</span>);</span><br></pre></td></tr></table></figure><p>正则表达式给 “\\w+” 加上小括号表示选中，后面的 $1 表示反向选中获取到的每个单词，然后给它加粗</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还记得第一次在知乎上看到正则表达式，看了半天都只是学了些皮毛，还转眼就忘。今天看了廖雪峰老师的教程，总结一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://OceanMiki.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="http://oceanmiki.github.io/2020/03/29/KMP%E7%AE%97%E6%B3%95/"/>
    <id>http://oceanmiki.github.io/2020/03/29/KMP%E7%AE%97%E6%B3%95/</id>
    <published>2020-03-29T04:27:21.866Z</published>
    <updated>2020-03-29T13:05:22.366Z</updated>
    
    <content type="html"><![CDATA[<p>KMP算法当匹配到不同的字符时，不是像暴力匹配那样从一开始的位置的后一位比较，而是聪明地跳过已经比较过的字符串。</p><a id="more"></a><h1 id="部分匹配值"><a href="#部分匹配值" class="headerlink" title="部分匹配值"></a>部分匹配值</h1><h4 id="前缀和后缀"><a href="#前缀和后缀" class="headerlink" title="前缀和后缀"></a>前缀和后缀</h4><p>给定一个字符串： <strong>bread</strong></p><ul><li>前缀：b，br，bre，brea</li><li>后缀：read，ead，ad，d</li></ul><p>部分匹配值就是前缀和后缀的最长共有字符的长度。</p><p>以“ABCDABD”为例：</p><ol><li>“A”的前缀后缀都为空，部分匹配值是0，</li><li>“AB”的前缀是“A”，后缀是“B”，部分匹配值是0，</li><li>……</li><li>“ABCDA”前缀是[“A”,”AB”,”ABC”,”ABCD”]，后缀是[“BCDA”,”CDA”,”DA”,”A”]，最长共有字符是“A”，长度是1，部分匹配值是1</li><li>“ABCDAB”前缀是[“A”,”AB”,”ABC”,”ABCD”,”ABCDA”]，后缀是[“BCDAB”,”CDAB”,”DAB”,”AB”,”B”]，最长共有字符是“AB”，长度是2，部分匹配值是2。</li><li>……</li></ol><p>很容易就得到”ABCDABD”的部分匹配表：</p><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th><th align="center">A</th><th align="center">B</th><th align="center">D</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">0</td></tr></tbody></table><p>注意部分匹配值是相对于字符串来说的，不是说字符“D”的部分匹配值是0，而是“ABCDABD”的部分匹配值是0。</p><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><p>子串作为搜索词，得到搜索词的部分匹配表。</p><p>遇到不匹配字符时，移动位数 = 已经匹配字符长度 - 对应的部分匹配值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KMPalgorithm</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"BCD ABCDAB ABCAB ABCABCDABD"</span>;</span><br><span class="line">        String str2 = <span class="string">"ABCDABD"</span>;</span><br><span class="line">        <span class="keyword">int</span>[] next = next(str2);</span><br><span class="line">        <span class="keyword">int</span> index = search(str1,str2,next);</span><br><span class="line">        System.out.println(index);<span class="comment">//20</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//搜索算法</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str1 母串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str2 子串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> next 部分匹配表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 存在则返回第一个子串出现的位置，不存在就返回-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(String str1, String str2, <span class="keyword">int</span>[] next)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//遍历，在暴力法的基础上改进</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; str1.length(); i++) &#123;</span><br><span class="line">            <span class="comment">//先处理不相等的情况</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; str1.charAt(i) != str2.charAt(j)) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];<span class="comment">//妙不可言</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (str1.charAt(i) == str2.charAt(j)) &#123;</span><br><span class="line">                j++;<span class="comment">//如果当前字符相等，就继续比较下一个。</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == str2.length()) &#123;<span class="comment">//说明找到了</span></span><br><span class="line">                <span class="keyword">return</span> i - j + <span class="number">1</span>;<span class="comment">//返回第一个子串出现的位置。由于i比j少一次++，所以再+1补上</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//遍历过程中索引j没有到达str2的最后一个字符，说明不存在。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到一个字符串（子串）的部分匹配表</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest 子串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回子串的部分匹配表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] next(String dest) &#123;</span><br><span class="line">        <span class="comment">//创建一个和字符串长度相等的数组</span></span><br><span class="line">        <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[dest.length()];</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//第一个位置只有一个字符，部分匹配值当然是0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; dest.length(); i++) &#123;<span class="comment">//i = 1，从第二个字符开始求部分匹配值。</span></span><br><span class="line">            <span class="comment">//先处理不相等的情况，直到相等</span></span><br><span class="line">            <span class="comment">//循环终止条件就是直到索引j回到和i对应的字符相同的位置</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; dest.charAt(i) != dest.charAt(j)) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];<span class="comment">//妙不可言</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//对应的部分匹配值加1</span></span><br><span class="line">            <span class="keyword">if</span> (dest.charAt(i) == dest.charAt(j)) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;KMP算法当匹配到不同的字符时，不是像暴力匹配那样从一开始的位置的后一位比较，而是聪明地跳过已经比较过的字符串。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://OceanMiki.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="String" scheme="http://OceanMiki.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>理解String的不可变性</title>
    <link href="http://oceanmiki.github.io/2020/03/15/%E7%90%86%E8%A7%A3String%E7%9A%84%E4%B8%8D%E5%8F%AF%E5%8F%98%E6%80%A7/"/>
    <id>http://oceanmiki.github.io/2020/03/15/%E7%90%86%E8%A7%A3String%E7%9A%84%E4%B8%8D%E5%8F%AF%E5%8F%98%E6%80%A7/</id>
    <published>2020-03-15T04:12:54.989Z</published>
    <updated>2020-03-29T03:19:19.895Z</updated>
    
    <content type="html"><![CDATA[<p>一旦一个String对象在内存中创建，它将是不可改变的，所有的String类中方法并不是改变String对象自己，而是重新创建一个新的String对象。</p><a id="more"></a><h1 id="字面量方式创建String"><a href="#字面量方式创建String" class="headerlink" title="字面量方式创建String"></a>字面量方式创建String</h1><h4 id="字符串重新赋值"><a href="#字符串重新赋值" class="headerlink" title="字符串重新赋值"></a>字符串重新赋值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"abc"</span>;</span><br><span class="line">String s2 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="comment">//此时s1 == s2</span></span><br><span class="line">s1 = <span class="string">"hello"</span>;</span><br><span class="line"><span class="comment">//s2还是abc，s1变成了hello</span></span><br></pre></td></tr></table></figure><p>通过字面量的形式给一个字符串赋值，此时字符串值声明在方法区的<strong>字符串常量池</strong>中。</p><p>字符串常量池<strong>不会</strong>存重复的字符串（即内容相同的字符串）。</p><p>一开始没有abc，就创建了一个abc，s1指向这个abc。s2也要指向abc，但是常量池中已经有了abc，就不要再新建一个abc了，直接让s2指向s1指向的abc，所以s1和s2的地址是相等的。</p><p>接着对s1重新赋值，并不是把s1指向的abc改成hello，而是新创建了一个hello，让s1指向新创建的hello。s2还是指向原来的abc。</p><h4 id="字符串的连接"><a href="#字符串的连接" class="headerlink" title="字符串的连接"></a>字符串的连接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s3 = <span class="string">"hello"</span>;</span><br><span class="line"><span class="comment">//很明显现在s1 == s3</span></span><br><span class="line">s3 += <span class="string">" world!"</span>;</span><br><span class="line"><span class="comment">//s3变成了"hello world!"，s1还是hello</span></span><br></pre></td></tr></table></figure><h4 id="字符的替换"><a href="#字符的替换" class="headerlink" title="字符的替换"></a>字符的替换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s4 = <span class="string">"abc"</span>;</span><br><span class="line">String s5 = s4.replace(<span class="string">'a'</span>,<span class="string">'m'</span>);<span class="comment">//把a换成m</span></span><br><span class="line"><span class="comment">//s5是mbc，s4还是abc</span></span><br></pre></td></tr></table></figure><p>不难发现，连接和替换都是重新创建了新的字符串，不能在原有的字符串上修改。</p><h4 id="为什么要有不可变性"><a href="#为什么要有不可变性" class="headerlink" title="为什么要有不可变性"></a>为什么要有不可变性</h4><p>你本来有一个字符串s1，又新创建了一个字符串s2。一开始使他们指向同一个字符串，后来s2变了，我们不希望s1也跟着改变。</p><h1 id="String对象的创建"><a href="#String对象的创建" class="headerlink" title="String对象的创建"></a>String对象的创建</h1><p>和 <code>String str = &quot;hello&quot;</code> 不一样，new一个String对象是放在堆里面的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"hello"</span>;</span><br><span class="line">      String s2 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">      System.out.println(s1 == s2);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>s1首先在方法区的字符串常量值中创建了hello，s2指向堆里面开辟的一个空间。String是引用类型，堆里面存储的也是一个地址，这个地址指向常量池中的hello。</p><p>那么问题来了， <code>String str = &quot;abc&quot;</code>  创建了几个对象？</p><p>答案是两个，一个是堆空间中new的，另一个是final的char[]数组对应在常量池中的数据“abc”。</p><p>但是如果常量池中本来就有abc，是不会再次声明的。因为常量池不存放重复的字符串。</p><h1 id="String不同拼接方式对比"><a href="#String不同拼接方式对比" class="headerlink" title="String不同拼接方式对比"></a>String不同拼接方式对比</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"abc"</span>;</span><br><span class="line">        String s2 = <span class="string">"hello"</span>;</span><br><span class="line">        String s3 = s1 + s2;</span><br><span class="line">        String s4 = <span class="string">"abchello"</span>;</span><br><span class="line">        String s5 = <span class="string">"abc"</span> + <span class="string">"hello"</span>;</span><br><span class="line">        String s6 = s1 + <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(s3 == s4);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s5 == s4);<span class="comment">//true</span></span><br><span class="line">        System.out.println(s6 == s4);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>拼接的时候只要有一个变量参与，就相当于new一个String对象，new出来的对象放在堆中，地址都不同。</p><p>两个字面量（常量）拼接的s5，还是在常量池中创建的。但是常量池已经存在了，所以s5和s4指向同一个字符串，地址也就一样了。</p><p>如果拼接的结果调用 intern（）方法，返回值指向常量池中的地址。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一旦一个String对象在内存中创建，它将是不可改变的，所有的String类中方法并不是改变String对象自己，而是重新创建一个新的String对象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://OceanMiki.github.io/categories/Java/"/>
    
    
      <category term="String" scheme="http://OceanMiki.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础</title>
    <link href="http://oceanmiki.github.io/2020/02/29/HTML%E5%9F%BA%E7%A1%80/"/>
    <id>http://oceanmiki.github.io/2020/02/29/HTML%E5%9F%BA%E7%A1%80/</id>
    <published>2020-02-29T04:03:38.022Z</published>
    <updated>2020-03-03T05:10:04.665Z</updated>
    
    <content type="html"><![CDATA[<p>I know HTML !</p><a id="more"></a><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"地址"</span> <span class="attr">target</span> = <span class="string">"_blank"</span>&gt;</span>超链接对象<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>_blank：另起一个窗口打开新网页 </li><li>_self：在当前窗口打开新的网页链接（默认）</li></ul><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span> = <span class="string">"500"</span>, <span class="attr">height</span> = <span class="string">"500"</span> <span class="attr">cellspacing</span> = <span class="string">"0"</span> <span class="attr">border</span> = <span class="string">"1"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span> = <span class="string">"2"</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>cellspacing 设置单元格间距</p></li><li><p>border 设置表格线，如果不写就没有表格的框架线条</p></li><li><p>colspan 设置单元格跨行，rowspan设置跨列</p></li><li><p>tr是行，td是列，th表示单元格里面加粗居中</p></li></ul><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    性别: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">checked</span> = <span class="string">checked</span>&gt;</span> 男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span>&gt;</span> 女<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    兴趣爱好: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span> = <span class="string">checked/</span>&gt;</span>Java<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>/&gt;</span>python<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>/&gt;</span>c++<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    国籍: <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>--请选择国籍--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> = <span class="string">selected</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>日本<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    自我评价： <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">cols</span>=<span class="string">"20"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>radio是单选</p></li><li><p>checkbox是多选</p></li><li><p>checked = checked是默认选择，selected同理</p></li><li><p>为了美观，可以把表单放在表格里面，第一列放文字信息，第二列放内容</p></li></ul><h1 id="表单提交的细节"><a href="#表单提交的细节" class="headerlink" title="表单提交的细节"></a>表单提交的细节</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    性别: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"man"</span>&gt;</span> 男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"woman"</span>&gt;</span> 女<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    兴趣爱好: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"java"</span>&gt;</span>Java</span><br><span class="line">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"py"</span>&gt;</span>python</span><br><span class="line">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"cpp"</span>&gt;</span>c++<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    国籍: <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"nation"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"null"</span>&gt;</span>--请选择国籍--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"cn"</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"us"</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"jp"</span>&gt;</span>日本<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    自我评价： <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">cols</span>=<span class="string">"20"</span> <span class="attr">name</span>=<span class="string">"desc"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="form标签是表单标签"><a href="#form标签是表单标签" class="headerlink" title="form标签是表单标签"></a>form标签是表单标签</h4><ul><li><p>action是请求提交的服务器地址</p></li><li><p>method是提交的方式，get /  post</p></li><li><p>隐藏域hidden，用来处理不需要给用户看的，但要传给服务器的信息（比如告诉服务器这个表单是用户注册的信息login）</p></li></ul><h4 id="表单提交后，数据没有发送给服务器可能情况"><a href="#表单提交后，数据没有发送给服务器可能情况" class="headerlink" title="表单提交后，数据没有发送给服务器可能情况"></a>表单提交后，数据没有发送给服务器可能情况</h4><ol><li>表单项中没有name属性（input ，select，textarea…）</li><li>单选，多选（下拉列表中的option标签）都需要设置 value ，以便服务器识别选项</li><li>提交的内容不在表单中</li></ol><h4 id="get请求的特点"><a href="#get请求的特点" class="headerlink" title="get请求的特点"></a>get请求的特点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.baidu.com&#x2F;?</span><br><span class="line">username&#x3D;冷亚麻色的</span><br><span class="line">&amp;</span><br><span class="line">password&#x3D;123456</span><br><span class="line">&amp;</span><br><span class="line">sex&#x3D;man</span><br><span class="line">&amp;</span><br><span class="line">hobby&#x3D;java&amp;hobby&#x3D;py</span><br><span class="line">&amp;</span><br><span class="line">nation&#x3D;cn</span><br><span class="line">&amp;</span><br><span class="line">desc&#x3D;xxx</span><br></pre></td></tr></table></figure><ul><li>浏览器地址栏中的的地址是：action属性+（？请求参数）</li><li>请求参数格式name=value&amp;name=value….</li><li>不安全</li><li>有数据长度的限制</li></ul><h4 id="post请求的特点"><a href="#post请求的特点" class="headerlink" title="post请求的特点"></a>post请求的特点</h4><ul><li>浏览器地址栏中只有action属性</li><li>相对于get更安全</li><li>理论上没有长度限制</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I know HTML !&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://OceanMiki.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaWeb" scheme="http://OceanMiki.github.io/tags/JavaWeb/"/>
    
      <category term="HTML" scheme="http://OceanMiki.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>链表技巧：快慢指针</title>
    <link href="http://oceanmiki.github.io/2020/02/16/%E9%93%BE%E8%A1%A8%E6%8A%80%E5%B7%A7%EF%BC%9A%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"/>
    <id>http://oceanmiki.github.io/2020/02/16/%E9%93%BE%E8%A1%A8%E6%8A%80%E5%B7%A7%EF%BC%9A%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/</id>
    <published>2020-02-16T14:24:55.546Z</published>
    <updated>2020-02-22T15:02:20.044Z</updated>
    
    <content type="html"><![CDATA[<p>现在有一个单向链表，不知道长度，怎么利用更短的时间找到中间值呢？先遍历一次，计算出链表长度n，再移动 n / 2 次找到中间值？是不是感觉有点憨批？</p><a id="more"></a><h1 id="单向链表的中间节点"><a href="#单向链表的中间节点" class="headerlink" title="单向链表的中间节点"></a>单向链表的中间节点</h1><p>我们可以定义一个慢指针 slow 和一个快指针 fast 。现在每次让 fast 移动 2 次，同时 slow 只移动 1 次。那么当 fast 移动到末尾时，slow 刚好“走到”中间！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">middleNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>移动的时候，因为 fast 每次都移动 2 次，所以要小心出现空指针错误，用之前写的翁恺老师讲的方法（类似c嘛）：.next前面的都要检查非空。是不是一下子就看出循环的判读条件了？slow肯定是比 fast 要慢的，就不要再判断了！</p><h1 id="判断链表是否有环"><a href="#判断链表是否有环" class="headerlink" title="判断链表是否有环"></a>判断链表是否有环</h1><p>和上面一样，slow移动 1 次，fast 移动 2 次。如果链表有环，最终 fast 和 slow 会相遇。如果链表没有环，fast会走到null，这时候返回 false 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode fast = head.next.next;</span><br><span class="line">        ListNode slow = head.next;</span><br><span class="line">        <span class="keyword">while</span>( slow != fast)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span> == fast || <span class="keyword">null</span> == fast.next)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，链表为空或只有一个节点，肯定是没有环的（什么？你说head.next = head?）</p><h1 id="倒数第k个节点"><a href="#倒数第k个节点" class="headerlink" title="倒数第k个节点"></a>倒数第k个节点</h1><p>这次 fast 和 slow 每次都只移动 1 下。但首先让 fast 先移动 k 次。当 fast 走到null时，slow就走到倒数第 k 个节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getKthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode slow = dummy;</span><br><span class="line">        ListNode fast = dummy;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k ;i++)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在有一个单向链表，不知道长度，怎么利用更短的时间找到中间值呢？先遍历一次，计算出链表长度n，再移动 n / 2 次找到中间值？是不是感觉有点憨批？&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://OceanMiki.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="http://OceanMiki.github.io/tags/Java/"/>
    
      <category term="链表" scheme="http://OceanMiki.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="LeetCode" scheme="http://OceanMiki.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>旋转链表</title>
    <link href="http://oceanmiki.github.io/2020/02/16/%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://oceanmiki.github.io/2020/02/16/%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2020-02-16T09:19:02.621Z</published>
    <updated>2020-02-16T09:19:02.621Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个链表，旋转链表，将链表每个节点向右移动 <em>k</em> 个位置，其中 <em>k</em> 是非负数。</p><a id="more"></a><h1 id="问题示例"><a href="#问题示例" class="headerlink" title="问题示例"></a>问题示例</h1><p>示例 1:</p><blockquote><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2<br>输出: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL<br>解释:<br>向右旋转 1 步: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL<br>向右旋转 2 步: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</p></blockquote><p>示例 2:</p><blockquote><p>输入: 0-&gt;1-&gt;2-&gt;NULL, k = 4<br>输出: 2-&gt;0-&gt;1-&gt;NULL<br>解释:<br>向右旋转 1 步: 2-&gt;0-&gt;1-&gt;NULL<br>向右旋转 2 步: 1-&gt;2-&gt;0-&gt;NULL<br>向右旋转 3 步: 0-&gt;1-&gt;2-&gt;NULL<br>向右旋转 4 步: 2-&gt;0-&gt;1-&gt;NULL</p></blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/rotate-list" target="_blank" rel="noopener">https://leetcode-cn.com/problems/rotate-list</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>官方题解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">rotateRight</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode old_tail = head;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">for</span>(n = <span class="number">1</span>; old_tail.next != <span class="keyword">null</span>; n++)</span><br><span class="line">            old_tail = old_tail.next;</span><br><span class="line">        old_tail.next = head;</span><br><span class="line">        </span><br><span class="line">        ListNode new_tail = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - k % n - <span class="number">1</span>; i++)</span><br><span class="line">            new_tail = new_tail.next;</span><br><span class="line">        ListNode new_head = new_tail.next;</span><br><span class="line">        </span><br><span class="line">        new_tail.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> new_head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>总体思路：先形成环形链表，找到旋转后新的链表头和链表为，最后断开。</p><p>先用一个辅助指针old_tail遍历链表，找到最后一个节点。</p><p>然后让此时的old_tail的next指向head，形成环形链表。</p><p>接下来就是找到旋转后的链表的尾部（new_tail）。通过示例发现可以让old_tail向左移动k次找到。</p><p>可这是一个单向链表。一开始我想，简单啊，反转链表不就行了？</p><p>然后就没有然后了，反转了之后，新的链表头就找不到了，不妥。（脑海有一个声音：再反转一次！）</p><p>转换一下，old_tail向左移动k次，等价于head向右移动 n-k-1 次。</p><p>新的问题来了，当k大于n的时候岂不是移动负数次了吗？</p><p>这时，我想起了之前用数组模拟环形队列的时候，可以用取余来解决。</p><p>所以，将 <strong>k%n</strong> 。得到的数一定小于n，问题解决！perfect！</p><p>找到新的链表尾部，它的next就是新的链表头。</p><p>最后记得把链表断开，不要旋转完把单链表变成环形链表！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个链表，旋转链表，将链表每个节点向右移动 &lt;em&gt;k&lt;/em&gt; 个位置，其中 &lt;em&gt;k&lt;/em&gt; 是非负数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://OceanMiki.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="http://OceanMiki.github.io/tags/Java/"/>
    
      <category term="环形链表" scheme="http://OceanMiki.github.io/tags/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/"/>
    
      <category term="力扣" scheme="http://OceanMiki.github.io/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>约瑟夫问题</title>
    <link href="http://oceanmiki.github.io/2020/02/15/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/"/>
    <id>http://oceanmiki.github.io/2020/02/15/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/</id>
    <published>2020-02-15T12:24:26.762Z</published>
    <updated>2020-02-15T12:24:26.763Z</updated>
    
    <content type="html"><![CDATA[<p>那一天，人类终于回想起了，曾经一度被猴子选大王支配的恐怖，还有不会链表的那份耻辱。</p><a id="more"></a><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>一群猴子要选新猴王。新猴王的选择方法是：让N只候选猴子围成一圈，从某位置起顺序编号为1~N号。从第k号开始报数，每轮从1报到m，凡报到m的猴子即退出圈子，接着又从紧邻的下一只猴子开始同样的报数。如此不断循环，最后剩下的一只猴子就选为猴王。请问是原来第几号猴子当选猴王？</p><p>输入格式：<br>在一行中给三个正整数。N（≤1000）代表有N只猴子，k（1≤k≤N）代表从第k只猴子开始报数，m（1≤m≤1000）代表报m个数。</p><p>输出格式：<br>在一行中输出当选猴王的编号。</p><p>输入样例：<br>5 1 2</p><p>输出样例：<br>3</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>环形链表模拟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">circleList</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Monkey first = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> Monkey cur = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Input is invalid!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nums ; i++) &#123;</span><br><span class="line">            Monkey monkey = <span class="keyword">new</span> Monkey(i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>)&#123;</span><br><span class="line">                first = monkey;</span><br><span class="line">                first.setNext(first);</span><br><span class="line">                cur = first;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                cur.setNext(monkey);</span><br><span class="line">                monkey.setNext(first);</span><br><span class="line">                cur = monkey;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (first == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"No monkeys!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Monkey cur = first;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.print(cur.getNo() + <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">if</span> (cur.getNext() == first) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectKing</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        Monkey last = first;<span class="comment">//定义一个辅助指针找到并指向环形链表的最后一个节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//防止傻逼</span></span><br><span class="line">        <span class="keyword">if</span>(first == <span class="keyword">null</span> || k &lt;= <span class="number">0</span> || k &gt; n || m &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Your input is illegal！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//首先让first移动k-1次找到开始报数的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k ;i++)&#123;</span><br><span class="line">            first = first.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当last的next是first时说明此时的last就是环形链表的最后一个</span></span><br><span class="line">        <span class="keyword">while</span> (last.getNext() != first)&#123;</span><br><span class="line">            last = last.getNext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;<span class="comment">//记录出局猴子的顺序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果last == first说明圈里面就剩下一只猴子了</span></span><br><span class="line">        <span class="keyword">while</span> (first != last)&#123;</span><br><span class="line">            <span class="comment">//报数，因为first本身也要报一个数，所以只要移动m-1次</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m ; i++)&#123;</span><br><span class="line">                first = first.getNext();</span><br><span class="line">                last = last.getNext();<span class="comment">//last也要跟着移动</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.printf(<span class="string">"第%d个出局的猴子编号是%d"</span>,index,first.getNo());</span><br><span class="line">            index++;</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="comment">//删除出局猴子的节点</span></span><br><span class="line">            first = first.getNext();</span><br><span class="line">            last.setNext(first);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">"大王是%d"</span>,first.getNo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monkey</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> Monkey next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Monkey</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Monkey <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Monkey next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">johnphuTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n, k, m;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        circleList list = <span class="keyword">new</span> circleList();</span><br><span class="line">        System.out.println(<span class="string">"有多少个猴子？"</span>);</span><br><span class="line">        n = scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"从第几只猴子开始报数？"</span>);</span><br><span class="line">        k = scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"每次报几个数？"</span>);</span><br><span class="line">        m = scanner.nextInt();</span><br><span class="line">        list.init(n);</span><br><span class="line">        list.selectKing(k,m,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>定义猴子节点的时候把猴子的编号都声明为private，所以使用了getter和setter方法，代码阅读性略有下降，不过不是太影响。</p><p>为了交互性，加入了一些文字提示。</p><p>算法核心就是，定义两个指针，一个找到开始报数的猴子（first），一个找到环形链表最后的猴子（last）。当两个指针重合，说明就剩下一只猴子了。</p><p>报m个数就是让两个指针一起向next移动m-1次，报完数时first的指向就是要淘汰的猴子。</p><p>淘汰猴子时，就让first指向下一只猴子（也就是要淘汰的猴子的next），然后改变last的next，使last的next变成first。这样，要淘汰的猴子就没有指针指向，在Java里被垃圾回收了，相当于删除。</p><p>最后剩下的猴子就是大王。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;那一天，人类终于回想起了，曾经一度被猴子选大王支配的恐怖，还有不会链表的那份耻辱。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://OceanMiki.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="Java" scheme="http://OceanMiki.github.io/tags/Java/"/>
    
      <category term="环形链表" scheme="http://OceanMiki.github.io/tags/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>单向链表的反转</title>
    <link href="http://oceanmiki.github.io/2020/02/14/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%8F%8D%E8%BD%AC/"/>
    <id>http://oceanmiki.github.io/2020/02/14/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%8F%8D%E8%BD%AC/</id>
    <published>2020-02-14T13:25:26.593Z</published>
    <updated>2020-02-16T13:57:11.811Z</updated>
    
    <content type="html"><![CDATA[<p>腾讯的一道面试题，将单向链表反转。</p><a id="more"></a><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><h4 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">heroNode</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> no;</span><br><span class="line">    heroNode next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">heroNode</span><span class="params">(String name, <span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"heroNode&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", no="</span> + no +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">singleList</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> heroNode head = <span class="keyword">new</span> heroNode(<span class="string">""</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">public</span> heroNode tail = head;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> heroNode <span class="title">getHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(heroNode newhero)</span></span>&#123;</span><br><span class="line">        tail.next = newhero;</span><br><span class="line">        tail = newhero;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">        heroNode temp = head.next;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        heroNode temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了头节点，我还定义了个尾节点，这样添加节点的时候就不用反复遍历链表来找到尾节点。另外，以后对双向链表的操作也更加方便（像什么逆序输出之类的）。</p><h1 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h1><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>首先，new一个新的头节点。</p><p>然后，将原来的链表每个节点按顺序取出，每取出一个节点就将它的next接上新的头节点的next（如果是第一个节点，接上的就是null）。</p><p>最后，将新的头节点的next接上取出的节点。</p><p><strong>但是</strong>，上面的方法是有问题的。</p><p>发现了没有？</p><p>取出的节点的next接上新的头节点的next之后，原来链表在取出的节点之后的所有节点都找不到了（next都变了）。</p><p>所以需要一个额外的节点，用来保存取出的节点的下一个节点。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse1</span><span class="params">(singleList original)</span></span>&#123;</span><br><span class="line">        singleList reverseList = <span class="keyword">new</span> singleList();</span><br><span class="line">        heroNode originHead = original.getHead();</span><br><span class="line">        heroNode cur = original.getHead().next;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="keyword">null</span> || cur.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        heroNode next = <span class="keyword">null</span>;</span><br><span class="line">        heroNode reverseHead = reverseList.getHead();<span class="comment">//新的头节点</span></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            next = cur.next;<span class="comment">//保存当前节点的下一个节点，避免丢失</span></span><br><span class="line">            cur.next = reverseHead.next;</span><br><span class="line">            reverseHead.next = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        original.getHead().next = reverseHead.next;<span class="comment">//原来的头接上反转之后的链表</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>原来这个函数我想不改变原来的链表，通过函数返回反转的链表，但就不是这么一个思路了，而且写出来也不好看。</p><p>为使代码更高效，如果链表为空，或者只有一个节点，就直接返回。</p><h1 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h1><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>利用栈的先进后出。</p><p>首先，将原链表的节点按顺序取出，每取出一个就将它压进栈中。</p><p>然后，定义一个新的链表。将栈中的节点一个个弹出，每弹出一个就接在新的链表后面。</p><p><strong>但是</strong>，记得把弹出的节点的next置空，否则会死循环。</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse2</span><span class="params">(singleList oringin)</span></span>&#123;</span><br><span class="line">        singleList reverseList = <span class="keyword">new</span> singleList();</span><br><span class="line">        heroNode temp = oringin.getHead().next;</span><br><span class="line">        <span class="keyword">if</span>(temp == <span class="keyword">null</span> || temp.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;heroNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        heroNode cur = reverseList.getHead();</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (stack.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            heroNode last = stack.pop();</span><br><span class="line">            last.next = <span class="keyword">null</span>;<span class="comment">//取出节点后将next域置空</span></span><br><span class="line">            cur.next = last;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        oringin.getHead().next = reverseList.getHead().next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个方法对原来链表破坏更加明显。</p><p>在取出节点的同时就将它的next置空，多亏了Java的垃圾回收机制，置空就置空了，不用我们自己手动的free掉。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;腾讯的一道面试题，将单向链表反转。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://OceanMiki.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="Java" scheme="http://OceanMiki.github.io/tags/Java/"/>
    
      <category term="单向链表" scheme="http://OceanMiki.github.io/tags/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>数组实现环形队列</title>
    <link href="http://oceanmiki.github.io/2020/02/13/%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97/"/>
    <id>http://oceanmiki.github.io/2020/02/13/%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97/</id>
    <published>2020-02-13T11:23:32.953Z</published>
    <updated>2020-02-14T13:41:34.507Z</updated>
    
    <content type="html"><![CDATA[<p>使用数组模拟静态队列，容易造成队列假溢出，导致队列只可用一次，无法复用。如果队列可以像圆环一样，自动回到开始已经空出来的地方，那真是极好的。</p><a id="more"></a><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">circleQueue</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> front, rear;</span><br><span class="line">    <span class="keyword">int</span> arr[];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">circleQueue</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>.size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(front == rear)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((rear + <span class="number">1</span>)%size == front)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"The Queue is full!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        arr[rear] = n;</span><br><span class="line">        rear = (rear+<span class="number">1</span>) % size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"The Queue is empty!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = arr[front];</span><br><span class="line">        front = (front + <span class="number">1</span>) % size;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear + size - front)%size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = front; i &lt; front + lenth(); i++) &#123;</span><br><span class="line">            System.out.print(arr[i%size]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用到了一点小小的算法，就是通过取余，使数组下标不会越界。</p><p>值得注意的是，构造函数里面的size初始化数组之后，得到环形队列的最大能存放个数是size-1。</p><p>这是因为环形队列预留了一个位置从而闭合成环，而预留的位置是不存放数值的。</p><p>比如，当size = 3时。初始化了一个arr[3]，环形队列最多加两个元素。开始front=0的情况下，元素最多add到arr[0]和arr[1]中。arr[2]肯定是存在的，只是它作为预留的一个位置，再想add时，队列判断已经满了，就加不了了。</p><p>假设队列中已经有两个元素，你现在get一个元素之后，front变成1，arr[0]就变成预留的位置。队列只有arr[1]中有元素，再添加的时候，就加到arr[2]中了。</p><h1 id="变量说明"><a href="#变量说明" class="headerlink" title="变量说明"></a>变量说明</h1><p>front从0开始，指向队列的头。rear从0开始，指向队列尾的 <strong>后一个元素</strong> 。</p><p>与静态队列不同，取出和添加操作，移动front和rear指向的时候都要先+1再对队列的size取模。</p><p>添加的时候直接把元素放在arr[rear]，因为此时这个位置就是队列最进去的元素的下一个位置。</p><p>而移除的时候，则需要先将要取出的元素保存起来，再移动front的指向。否则，你就找不到取出的元素了。</p><p>length（）函数是用来求当前队列的有效数据的个数，不一定等于size。而且（rear+size-front）%size这个表达式中+size不可省略。因为rear-front可能是负数。</p><p>众所周知，负数模整数的余数还是负数（0除外）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用数组模拟静态队列，容易造成队列假溢出，导致队列只可用一次，无法复用。如果队列可以像圆环一样，自动回到开始已经空出来的地方，那真是极好的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://OceanMiki.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="Java" scheme="http://OceanMiki.github.io/tags/Java/"/>
    
      <category term="环形队列" scheme="http://OceanMiki.github.io/tags/%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>数据结构基础：链表</title>
    <link href="http://oceanmiki.github.io/2020/02/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%EF%BC%9A%E9%93%BE%E8%A1%A8/"/>
    <id>http://oceanmiki.github.io/2020/02/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%EF%BC%9A%E9%93%BE%E8%A1%A8/</id>
    <published>2020-02-12T13:04:57.765Z</published>
    <updated>2020-02-12T13:04:57.765Z</updated>
    
    <content type="html"><![CDATA[<p>郝斌老师的数据结构，C语言实现链表的一些基本操作，不同的是加了个结构体专门指向链表的头节点和尾节点，以后操作更方便。</p><a id="more"></a><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><h4 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;NODE,*PNODE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">List</span>&#123;</span></span><br><span class="line">    PNODE pHead;</span><br><span class="line">    PNODE pTail;</span><br><span class="line">&#125;LIST,*PLIST;</span><br></pre></td></tr></table></figure><h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_List</span><span class="params">(PLIST)</span></span>;<span class="comment">//初始化链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_List</span><span class="params">( LIST )</span></span>;<span class="comment">//遍历链表</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_Empty</span><span class="params">( LIST )</span></span>;<span class="comment">//判断链表非空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">len_List</span><span class="params">(LIST)</span></span>;<span class="comment">//得到链表节点长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">( PLIST )</span></span>;<span class="comment">//对链表排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">( PLIST )</span></span>;<span class="comment">//在末尾添加元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(PLIST plist)</span></span>;<span class="comment">//插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">delete_List</span><span class="params">(PLIST)</span></span>;<span class="comment">//删除元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">( LIST )</span></span>;<span class="comment">//测试</span></span><br></pre></td></tr></table></figure><h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LIST <span class="built_in">list</span>;</span><br><span class="line">    init_List(&amp;<span class="built_in">list</span>);</span><br><span class="line">    add(&amp;<span class="built_in">list</span>);</span><br><span class="line">    traverse_List(<span class="built_in">list</span>);</span><br><span class="line">    insert(&amp;<span class="built_in">list</span>);</span><br><span class="line">    traverse_List(<span class="built_in">list</span>);</span><br><span class="line">    delete_List(&amp;<span class="built_in">list</span>);</span><br><span class="line">    traverse_List(<span class="built_in">list</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;len_List(<span class="built_in">list</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//最后输出链表节点个数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="功能函数"><a href="#功能函数" class="headerlink" title="功能函数"></a>功能函数</h1><h4 id="链表初始化"><a href="#链表初始化" class="headerlink" title="链表初始化"></a>链表初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_List</span><span class="params">(PLIST <span class="built_in">list</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">list</span>-&gt;pHead = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">list</span>-&gt;pHead = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">list</span>-&gt;pHead == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"pHead malloc failed!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">list</span>-&gt;pTail = <span class="built_in">list</span>-&gt;pHead;</span><br><span class="line">    <span class="built_in">list</span>-&gt;pTail-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入你想生成链表的节点数！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">        PNODE pNew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入一个第"</span>&lt;&lt;i&lt;&lt;<span class="string">"个节点的值！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;val;</span><br><span class="line">        <span class="keyword">if</span> (pNew == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"New node malloc failed!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pNew-&gt;data = val;</span><br><span class="line">        <span class="built_in">list</span>-&gt;pTail-&gt;next = pNew;</span><br><span class="line">        pNew-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">list</span>-&gt;pTail = pNew;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的是：一开始，将链表尾节点指针指向链表头节点之后，紧接着记得将尾节点（这时也等同于头节点）的next置为NULL。</p><p>头节点本身不存储数据，只是用来操作。那么，在用户输入链表节点数为0的时候，生成的链表就是空的。头节点的next为NULL就代表链表为空。</p><h4 id="判断链表是否为空"><a href="#判断链表是否为空" class="headerlink" title="判断链表是否为空"></a>判断链表是否为空</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_Empty</span><span class="params">(LIST <span class="built_in">list</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == <span class="built_in">list</span>.pHead-&gt;next)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历链表"><a href="#遍历链表" class="headerlink" title="遍历链表"></a>遍历链表</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_List</span><span class="params">(LIST <span class="built_in">list</span>)</span></span>&#123;</span><br><span class="line">    PNODE p;</span><br><span class="line">    <span class="keyword">for</span>(p = <span class="built_in">list</span>.pHead-&gt;next; p ; p = p-&gt;next)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个for循环不可谓不经典！</p><h4 id="链表长度"><a href="#链表长度" class="headerlink" title="链表长度"></a>链表长度</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">len_List</span><span class="params">(LIST <span class="built_in">list</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(PNODE p = <span class="built_in">list</span>.pHead-&gt;next ; p ; p = p-&gt;next)&#123;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链表排序"><a href="#链表排序" class="headerlink" title="链表排序"></a>链表排序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(PLIST pList)</span></span>&#123;</span><br><span class="line">    PNODE p,q;</span><br><span class="line">    <span class="keyword">for</span> (p = pList-&gt;pHead-&gt;next; p-&gt;next ;p = p-&gt;next)&#123;</span><br><span class="line">        <span class="keyword">for</span>(q = p-&gt;next ; q ; q = q-&gt;next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;data &gt; q-&gt;data)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = q-&gt;data;</span><br><span class="line">                q-&gt;data = p-&gt;data;</span><br><span class="line">                p-&gt;data = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>冒泡排序嘛，第一层循环len-1次，第二层要比较到最后。</p><h4 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(PLIST plist)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入想要添加节点个数！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; <span class="string">"请输入添加的第"</span>&lt;&lt;i&lt;&lt;<span class="string">"个节点！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;val;</span><br><span class="line">        PNODE pNew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span> != pNew) &#123;</span><br><span class="line">            pNew-&gt;data = val;</span><br><span class="line">            pNew-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">            plist-&gt;pTail-&gt;next = pNew;</span><br><span class="line">            plist-&gt;pTail = pNew;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"new node add failed!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和初始化写法差不多</p><h4 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(PLIST plist)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos, val;<span class="comment">//在第pos个节点的前一个位置插入val，pos从1开始</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入需要插入的位置："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;pos;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入插入的元素："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    PNODE p = plist-&gt;pHead;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">NULL</span> != p &amp;&amp; i &lt; pos - <span class="number">1</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; pos - <span class="number">1</span> || p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    PNODE pNew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == pNew)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    PNODE q;<span class="comment">//临时存放原来pos位置的节点</span></span><br><span class="line"></span><br><span class="line">    pNew-&gt;data = val;</span><br><span class="line">    q = p-&gt;next;</span><br><span class="line">    p-&gt;next = pNew;</span><br><span class="line">    pNew-&gt;next = q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个while循环找到插入位置很精髓有木有？</p><p>加个if判断，我想主要是总共就5个节点，用户却想在第10个位置插入，那还叫插入嘛。。那是无中生有！</p><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">delete_List</span><span class="params">(PLIST plist)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos;<span class="comment">//删除第pos个位置的元素</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入需要删除的元素的位置："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;pos;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找到需要被删除节点的上一个节点位置，并用p指向它</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    PNODE p = plist-&gt;pHead;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">NULL</span> != p-&gt;next &amp;&amp; i &lt; pos - <span class="number">1</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; pos - <span class="number">1</span> || <span class="literal">NULL</span> == p-&gt;next)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    PNODE q = p-&gt;next;</span><br><span class="line">    p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样是用while找位置，但和上面的有点小小的不同。这里要找的位置，是需要删除节点的上一个节点。所以判断whil循环结束的条件有差别。</p><p>我写的时候还犯了个小错误。</p><p>就是最后删除的时候，不是定义了个临时指针q把需要删除的元素先存起来嘛。我紧接着就把q（也就是p的next）给free掉了，最后才将p的next指向p的next的next，可p的next（q）早就被我free掉了。然后死循环了。。。</p><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(LIST <span class="built_in">list</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;郝斌老师的数据结构，C语言实现链表的一些基本操作，不同的是加了个结构体专门指向链表的头节点和尾节点，以后操作更方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://OceanMiki.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="指针" scheme="http://OceanMiki.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
      <category term="链表" scheme="http://OceanMiki.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="C" scheme="http://OceanMiki.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++之链表中的指针</title>
    <link href="http://oceanmiki.github.io/2020/02/11/C++%E4%B9%8B%E9%93%BE%E8%A1%A8%E9%87%8C%E7%9A%84%E6%8C%87%E9%92%88/"/>
    <id>http://oceanmiki.github.io/2020/02/11/C++%E4%B9%8B%E9%93%BE%E8%A1%A8%E9%87%8C%E7%9A%84%E6%8C%87%E9%92%88/</id>
    <published>2020-02-11T14:54:35.051Z</published>
    <updated>2020-02-12T11:41:13.729Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始写链表的时候，指针用的不熟悉，都是一些简单的小毛病。（有机会继续补充，逃</p><a id="more"></a><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h4 id="一"><a href="#一" class="headerlink" title="一"></a>一</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在这里定义一个结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">pNext</span>;</span></span><br><span class="line">&#125;NODE, *PNODE;</span><br></pre></td></tr></table></figure><p>比如说，我有次把一个结构体指针写成了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> *<span class="title">Node</span> <span class="title">pHead</span>;</span></span><br></pre></td></tr></table></figure><p>IDE都报错了“Declaration of anonymous struct must be a definition”，我还回去检查结构体…汗。</p><p>正确写法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">pHead</span>;</span></span><br></pre></td></tr></table></figure><p>*说明它后面跟着的变量是一个指针，指针指向的内容的类型是前面的struct Node，这样记忆就清晰很多了。</p><h4 id="二"><a href="#二" class="headerlink" title="二"></a>二</h4><p>当需要对结构体中的值进行操作的时候，如果用的是结构体的直接小数点点一下就好。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">p</span>;</span></span><br><span class="line">p.val = <span class="number">201314</span>;</span><br></pre></td></tr></table></figure><p>但如果用的是结构体指针的话，点是出不来东西的，用个“-&gt;”，形象点可以叫arrow。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pHead-&gt;val = <span class="number">201314</span>;</span><br></pre></td></tr></table></figure><p>为什么这都要说一下呢？这是因为，Clion非常智能地在我试图用结构体指针点东西的时候，自动改成arrow。我怕以后形成习惯了。。。</p><h4 id="三"><a href="#三" class="headerlink" title="三"></a>三</h4><p>在函数里面，静态内存在函数执行完毕之后就会消失，动态内存分配则还会存在。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NODE *node = (NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">PNODE node = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br></pre></td></tr></table></figure><p>等号右边的（NODE*）表示的是类型转换。</p><p>sizeof（）里面的是你要分配的空间大小，这里要分配的是一个结构体，而不是一个指针。</p><h1 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h1><p>还比如说，链表的一些操作总容易忘记检查一些指针是否非空就开始操作，翁恺老师讲了一个很机械的方法，我感觉给我这种笨人检查挺好用的。</p><ul><li>How do we find the boundary?</li><li>Any pointer at the left of -&gt; must be checked.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始写链表的时候，指针用的不熟悉，都是一些简单的小毛病。（有机会继续补充，逃&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://OceanMiki.github.io/categories/C/"/>
    
    
      <category term="指针" scheme="http://OceanMiki.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
      <category term="链表" scheme="http://OceanMiki.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>C++之指针的指针</title>
    <link href="http://oceanmiki.github.io/2020/02/08/C++%E4%B9%8B%E6%8C%87%E9%92%88%E7%9A%84%E6%8C%87%E9%92%88/"/>
    <id>http://oceanmiki.github.io/2020/02/08/C++%E4%B9%8B%E6%8C%87%E9%92%88%E7%9A%84%E6%8C%87%E9%92%88/</id>
    <published>2020-02-08T03:07:20.566Z</published>
    <updated>2020-02-08T03:36:48.611Z</updated>
    
    <content type="html"><![CDATA[<p>需要修改指针指向的时候，参数传入指针的指针。</p><a id="more"></a><p>比如使用链表时，你有一个头结点指针。</p><p>在某个函数中（比如说添加新的节点add函数）你需要对头结点指针进行修改，如果只是将头结点指针当成形式参数传进函数，函数里面的参数只是一个对头结点指针的副本，作用域只是在函数内部,在函数里面对它的任何操作不会影响函数外真正的头结点指针 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Node *head,<span class="keyword">int</span> num)</span></span>;</span><br></pre></td></tr></table></figure><p>一种解决方法是将头结点指针定义为全局变量。但全局变量是有局限性的，会使得add函数变成一次性的函数。当你的程序中需要使用多个链表的时候呢？</p><p>这时候,你看到了函数的返回值是void。噢，太棒了，你不是要修改头指针吗？诶，我把头指针修改之后返回！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">add</span><span class="params">(Node *head, <span class="keyword">int</span> num)</span></span>;</span><br></pre></td></tr></table></figure><p>但显然用起来变得麻烦了，每次调用add函数还得接收一下返回值。（万一忘了呢？）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head = add(head, number);</span><br></pre></td></tr></table></figure><p>还有一种办法就是传递头结点指针的指针，也就是把头结点指针的地址传入(C++中也可以理解为引用)，这样就可以在函数中直接操作原来的头结点指针了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Node **head, <span class="keyword">int</span> num)</span></span>;</span><br></pre></td></tr></table></figure><p>当然,对于链表,这只是初级封装的办法,更好的封装性写法可以再定义一个链表结构体或者是用一个几乎在链表生命期内不会被修改的哨兵型头结点(双向链表的尾结点同理)。如果一定要用C写封装性良好的代码，时刻想着把C里面的结构体跟C++中的类作类比。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Node *h,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(Node *h)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Node *head = <span class="literal">NULL</span>;</span><br><span class="line">    head = (Node*)(<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node)));</span><br><span class="line">    </span><br><span class="line">    head-&gt;num = <span class="number">5</span>;</span><br><span class="line">    test(head);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"test之后main里面的num:"</span>&lt;&lt;head-&gt;num&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"地址："</span>&lt;&lt;head&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(Node *h)</span></span>&#123;</span><br><span class="line">    h-&gt;num = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"test里面还没修改的地址："</span>&lt;&lt;h&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    h = (Node*)(<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node)));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"test里面重新对h赋值后的地址："</span>&lt;&lt;h&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">test里面还没修改的地址：0x181550</span></span><br><span class="line"><span class="comment">test里面重新对h赋值后的地址：0x181570</span></span><br><span class="line"><span class="comment">test之后main里面的num:10</span></span><br><span class="line"><span class="comment">地址：0x181550</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面的这个例子能够很好的解释传入的结构体指针其实还是值传递。</p><p>我们可以看到，再main函数中，一开始就为head指针malloc一片内存，这时候里面的地址是：0x181550，然后为head里面的num赋值为5。</p><p>之后，调用test函数将h里面的num修改成10，然后此时输出的地址其实还是一开始malloc的值。</p><p>再之后，对h重新malloc新的内存，通过输出发现此时h的值改变了（变成了：0x181570）。</p><p>回到main函数，看到输出就明白了。刚才在test里面的修改，在main函数里面只能改变指针指向的内容num（把5变成了10）。</p><p>然而，指针的值是不会改变的。这是因为函数值传递的关系，通过函数形参穿过去的值都只是复制了一份。test（）函数执行完之后，并不会改变原来的值。</p><p>这其实和刚开始学C的时候想用自定义一个<code>swap（int a, int b）</code>函数的值传递是一样的。想要真正交换两个数的值要写成<code>swap（int *a, int *b）</code> 。</p><p>这里想要修改指针<code>Node *head</code>的值，就必须要用到指针的指针<code>Node **head</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需要修改指针指向的时候，参数传入指针的指针。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://OceanMiki.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="http://OceanMiki.github.io/tags/C/"/>
    
      <category term="指针" scheme="http://OceanMiki.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
      <category term="值传递" scheme="http://OceanMiki.github.io/tags/%E5%80%BC%E4%BC%A0%E9%80%92/"/>
    
  </entry>
  
  <entry>
    <title>Java语言之时间LocalDateTime</title>
    <link href="http://oceanmiki.github.io/2020/02/02/Java%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%97%B6%E9%97%B4LocalDateTime/"/>
    <id>http://oceanmiki.github.io/2020/02/02/Java%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%97%B6%E9%97%B4LocalDateTime/</id>
    <published>2020-02-02T09:25:52.945Z</published>
    <updated>2020-02-02T12:38:03.238Z</updated>
    
    <content type="html"><![CDATA[<p>从 Java 8 开始，<code>java.time</code>包提供了新的日期和时间API，以及一套新的用于取代<code>SimpleDateFormat</code>的格式化类型<code>DateTimeFormatter</code>。和旧的API相比，新的对日期和时间进行运算更加方便。</p><a id="more"></a><h1 id="最常用的LocalDateTime"><a href="#最常用的LocalDateTime" class="headerlink" title="最常用的LocalDateTime"></a>最常用的LocalDateTime</h1><h4 id="获取当前日期和时间"><a href="#获取当前日期和时间" class="headerlink" title="获取当前日期和时间"></a>获取当前日期和时间</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime now = LocalDateTime.now();</span><br></pre></td></tr></table></figure><h4 id="通过指定的日期和时间创建"><a href="#通过指定的日期和时间创建" class="headerlink" title="通过指定的日期和时间创建"></a>通过指定的日期和时间创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用of()方法</span></span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.of(<span class="number">2019</span>, <span class="number">8</span>, <span class="number">27</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">00</span>);</span><br><span class="line"></span><br><span class="line">LocalDate d2 = LocalDate.of(<span class="number">2019</span>, <span class="number">11</span>, <span class="number">30</span>); <span class="comment">// 2019-11-30, 注意11=11月</span></span><br><span class="line">LocalTime t2 = LocalTime.of(<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>); <span class="comment">// 15:16:17</span></span><br><span class="line">LocalDateTime dt2 = LocalDateTime.of(<span class="number">2019</span>, <span class="number">11</span>, <span class="number">30</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>);</span><br><span class="line">LocalDateTime dt3 = LocalDateTime.of(d2, t2);</span><br></pre></td></tr></table></figure><p>其中of（）方法是重载的，这里演示使用 <strong>年月日时分秒</strong> ，也可以选择不使用秒数等的方法。</p><p>而且与Date不同，不需要考虑时间偏移的问题，月份一 一对应，星期也是1~7对对应星期一到星期日。</p><h1 id="DateTimeFormatter的使用"><a href="#DateTimeFormatter的使用" class="headerlink" title="DateTimeFormatter的使用"></a>DateTimeFormatter的使用</h1><h4 id="自定义格式时间和日期"><a href="#自定义格式时间和日期" class="headerlink" title="自定义格式时间和日期"></a>自定义格式时间和日期</h4><p>一般来说：</p><ul><li>日期：yyyy-MM-dd</li><li>时间：HH:mm:ss</li></ul><p>这里需要注意的是月份MM大写（为了和分钟区分），小时HH大写是为了使用24小时进制的时间。如果写成hh，当parse某个字符串中使用大于12的小时（13，14…）会抛异常。</p><h4 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime now = LocalDateTime.now();</span><br><span class="line">DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">String str = dateTimeFormatter.format(now);</span><br><span class="line">System.out.println(now);</span><br><span class="line">System.out.println(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"> <span class="number">2020</span>-<span class="number">02</span>-<span class="number">02</span>T15:<span class="number">14</span>:<span class="number">34.092</span></span><br><span class="line"> <span class="number">2020</span>-<span class="number">02</span>-<span class="number">02</span> <span class="number">15</span>:<span class="number">14</span>:<span class="number">34</span></span><br></pre></td></tr></table></figure><p>使用ofPattern()方法自定义格式。</p><h4 id="解析时间"><a href="#解析时间" class="headerlink" title="解析时间"></a>解析时间</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String(<span class="string">"2019-08-27 13:14:00"</span>);</span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.parse(str,dateTimeFormatter);</span><br><span class="line">String format = dateTimeFormatter.format(localDateTime);</span><br><span class="line"></span><br><span class="line">System.out.println(format);<span class="comment">//用上面的格式化方法得到字符串，和原来的一样</span></span><br><span class="line">System.out.println(localDateTime);<span class="comment">//解析后的LocalDateTime</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">08</span>-<span class="number">27</span> <span class="number">13</span>:<span class="number">14</span>:<span class="number">00</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">08</span>-<span class="number">27</span>T13:<span class="number">14</span></span><br></pre></td></tr></table></figure><p>这里严格按照ISO 8601的格式，注意ISO 8601规定的日期和时间分隔符是 <code>T</code> 。</p><p>这里我发现一个细节，就是当解析的时间秒数为00的时候，解析后的LocalDateTime会自动省略秒数。</p><h1 id="对时间日期的加减运算"><a href="#对时间日期的加减运算" class="headerlink" title="对时间日期的加减运算"></a>对时间日期的加减运算</h1><p>简单的：plus就是加，minus就是减，还可以链式操作哦。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDateTime dt = LocalDateTime.of(<span class="number">2019</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">59</span>);</span><br><span class="line">        System.out.println(dt);</span><br><span class="line">        <span class="comment">// 加5天减3小时:</span></span><br><span class="line">        LocalDateTime dt2 = dt.plusDays(<span class="number">5</span>).minusHours(<span class="number">3</span>);</span><br><span class="line">        System.out.println(dt2); <span class="comment">// 2019-10-31T17:30:59</span></span><br><span class="line">        <span class="comment">// 减1月:</span></span><br><span class="line">        LocalDateTime dt3 = dt2.minusMonths(<span class="number">1</span>);</span><br><span class="line">        System.out.println(dt3); <span class="comment">// 2019-09-30T17:30:59</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到月份加减会自动调整日期，例如从<code>2019-10-31</code>减去1个月得到的结果是<code>2019-09-30</code>，因为9月没有31日。</p><h1 id="对时间日期的设置"><a href="#对时间日期的设置" class="headerlink" title="对时间日期的设置"></a>对时间日期的设置</h1><p>你以为用set？no  no  no…</p><p>对日期和时间进行调整则使用<code>withXxx()</code>方法，例如：<code>withHour(15)</code>会把<code>10:11:12</code>变为<code>15:11:12</code>：</p><ul><li>调整年：withYear()</li><li>调整月：withMonth()</li><li>调整日：withDayOfMonth()</li><li>调整时：withHour()</li><li>调整分：withMinute()</li><li>调整秒：withSecond()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDateTime dt = LocalDateTime.of(<span class="number">2019</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">59</span>);</span><br><span class="line">        System.out.println(dt);</span><br><span class="line">        <span class="comment">// 日期变为31日:</span></span><br><span class="line">        LocalDateTime dt2 = dt.withDayOfMonth(<span class="number">31</span>);</span><br><span class="line">        System.out.println(dt2); <span class="comment">// 2019-10-31T20:30:59</span></span><br><span class="line">        <span class="comment">// 月份变为9:</span></span><br><span class="line">        LocalDateTime dt3 = dt2.withMonth(<span class="number">9</span>);</span><br><span class="line">        System.out.println(dt3); <span class="comment">// 2019-09-30T20:30:59</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样注意到调整月份时，会相应地调整日期，即把<code>2019-10-31</code>的月份调整为<code>9</code>时，日期也自动变为<code>30</code>。</p><p>实际上，<code>LocalDateTime</code>还有一个通用的<code>with()</code>方法允许我们做更复杂的运算。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 本月第一天0:00时刻:</span></span><br><span class="line">        LocalDateTime firstDay = LocalDate.now().withDayOfMonth(<span class="number">1</span>).atStartOfDay();</span><br><span class="line">        <span class="comment">//或者</span></span><br><span class="line">        LocalDateTime firstDay = LocalDateTime.now().withDayOfMonth(<span class="number">1</span>).withHour(<span class="number">00</span>).withMinute(<span class="number">00</span>).withSecond(<span class="number">00</span>).withNano(<span class="number">000</span>);</span><br><span class="line">        System.out.println(firstDay);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 本月最后1天:</span></span><br><span class="line">        LocalDate lastDay = LocalDate.now().with(TemporalAdjusters.lastDayOfMonth());</span><br><span class="line">        System.out.println(lastDay);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下月第1天:</span></span><br><span class="line">        LocalDate nextMonthFirstDay = LocalDate.now().with(TemporalAdjusters.firstDayOfNextMonth());</span><br><span class="line">        System.out.println(nextMonthFirstDay);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 本月第1个周一:</span></span><br><span class="line">        LocalDate firstWeekday = LocalDate.now().with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY));</span><br><span class="line">        System.out.println(firstWeekday);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//某个月的第一天</span></span><br><span class="line">        LocalDate localDate = LocalDate.parse(<span class="string">"2019-02-02"</span>,DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd"</span>));</span><br><span class="line">        LocalDate first = localDate.withDayOfMonth(<span class="number">1</span>);</span><br><span class="line">        System.out.println(first);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//某个月的最后一个星期四（11月的就是感恩节）</span></span><br><span class="line">        LocalDate localDate = LocalDate.parse(<span class="string">"2020-11-02"</span>,DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd"</span>));</span><br><span class="line">        LocalDate last = localDate.with(TemporalAdjusters.lastInMonth(DayOfWeek.THURSDAY));</span><br><span class="line">        System.out.println(last);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意用到TemporalAdjusters末尾的s，不然就没有后面的静态方法。如果获取到某个月的最后一天的值返回给的不是LocalDate而是LocalDateTime，时间是不会自动变成23：59：59的，需要的自己设定。某个月的第一天也是这样。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>Java 8引入了新的日期和时间API，它们是不变类，默认按ISO 8601标准格式化和解析；</p><p>使用<code>LocalDateTime</code>可以非常方便地对日期和时间进行加减，或者调整日期和时间，它总是返回新对象；</p><p>使用<code>isBefore()</code>和<code>isAfter()</code>可以判断日期和时间的先后；</p><p>使用<code>Duration</code>和<code>Period</code>可以分别表示两个日期和时间的“区间间隔”。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从 Java 8 开始，&lt;code&gt;java.time&lt;/code&gt;包提供了新的日期和时间API，以及一套新的用于取代&lt;code&gt;SimpleDateFormat&lt;/code&gt;的格式化类型&lt;code&gt;DateTimeFormatter&lt;/code&gt;。和旧的API相比，新的对日期和时间进行运算更加方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="http://OceanMiki.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://OceanMiki.github.io/tags/Java/"/>
    
      <category term="时间" scheme="http://OceanMiki.github.io/tags/%E6%97%B6%E9%97%B4/"/>
    
      <category term="DateTimeFormatter" scheme="http://OceanMiki.github.io/tags/DateTimeFormatter/"/>
    
  </entry>
  
  <entry>
    <title>Java语言之线程安全</title>
    <link href="http://oceanmiki.github.io/2020/01/27/Java%E8%AF%AD%E8%A8%80%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    <id>http://oceanmiki.github.io/2020/01/27/Java%E8%AF%AD%E8%A8%80%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</id>
    <published>2020-01-27T06:32:21.000Z</published>
    <updated>2020-02-02T12:35:33.097Z</updated>
    
    <content type="html"><![CDATA[<p>在多线程程序中，会出现多个线程抢占一个资源的情况，这时间有可能会造成冲突，也就是一个线程可能还没来得及将更改的资源保存，另一个线程的更改就开始了。</p><a id="more"></a><h1 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h1><p>现有100张电影票交给3个售票窗口出售。每一个窗口用一个线程表示。</p><p>使用继承Thread方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Window2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" sells: "</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window2 t1 = <span class="keyword">new</span> Window2();</span><br><span class="line">        Window2 t2 = <span class="keyword">new</span> Window2();</span><br><span class="line">        Window2 t3 = <span class="keyword">new</span> Window2();</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的代码存在线程安全问题，会出现不同窗口卖出同一张票（重票），或者卖出不存在的票（错票：如-1号票）。</p><h1 id="使用同步代码块处理线程安全问题"><a href="#使用同步代码块处理线程安全问题" class="headerlink" title="使用同步代码块处理线程安全问题"></a>使用同步代码块处理线程安全问题</h1><h4 id="Runable接口示例："><a href="#Runable接口示例：" class="headerlink" title="Runable接口示例："></a>Runable接口示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" sells: "</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window window = <span class="keyword">new</span> Window();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步监视器)&#123;</span><br><span class="line">    <span class="comment">//需要同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步监视器（俗称叫作锁）：任何一个类的对象都可以充当锁。要求：多个线程必须共用同一把锁，锁必须是唯一的。</p><p>在Runable接口中不必每次都new一个obj，可以直接使用this（即当前对象实例）充当锁。因为在main方法中只new了一个Window对象，所以当前对象实例是唯一的。</p><h4 id="继承Thread类示例："><a href="#继承Thread类示例：" class="headerlink" title="继承Thread类示例："></a>继承Thread类示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Window2<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" sells: "</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window2 t1 = <span class="keyword">new</span> Window2();</span><br><span class="line">        Window2 t2 = <span class="keyword">new</span> Window2();</span><br><span class="line">        Window2 t3 = <span class="keyword">new</span> Window2();</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里，如果想要使用new一个obj对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><p>线程还是不安全的，因为obj是非静态的属性，而在main方法中Window2对象new了3个，相当于每个线程都有一把自己的锁，那么此时锁就不唯一了。</p><p>那么可以将obj修改为静态的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><p>或者像实例一样使用当前类Window2.class（这也是一个对象，而且是唯一的）。</p><h1 id="使用同步方法解决线程安全问题"><a href="#使用同步方法解决线程安全问题" class="headerlink" title="使用同步方法解决线程安全问题"></a>使用同步方法解决线程安全问题</h1><h4 id="Runable接口示例：-1"><a href="#Runable接口示例：-1" class="headerlink" title="Runable接口示例："></a>Runable接口示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span>  <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" sells: "</span> + ticket);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window window = <span class="keyword">new</span> Window();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步代码块是将需要同步处理的代码包起来，如果需要同步的数据恰好就在一个方法中，我们就可以把这个方法设置成同步方法，例如示例中的show（）方法。</p><p>同步方法仍然有同步监视器，只不过不需要我们显式的声明。</p><p>Runable接口示例里面的同步方法show（）中，它的同步监视器就是this。</p><h4 id="继承Thread类示例：-1"><a href="#继承Thread类示例：-1" class="headerlink" title="继承Thread类示例："></a>继承Thread类示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" sells: "</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                show();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window2 t1 = <span class="keyword">new</span> Window2();</span><br><span class="line">        Window2 t2 = <span class="keyword">new</span> Window2();</span><br><span class="line">        Window2 t3 = <span class="keyword">new</span> Window2();</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样地，这里的同步方法也必须为static，而由于静态方法不能调用非静态属性，票数（ticket）也必须为static的。</p><p>这里show（）方法的锁就是当前类对象Window2.class.</p><h1 id="单例模式之懒汉模式的线程安全"><a href="#单例模式之懒汉模式的线程安全" class="headerlink" title="单例模式之懒汉模式的线程安全"></a>单例模式之懒汉模式的线程安全</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lazy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Lazy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Lazy instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Lazy <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//效率低：</span></span><br><span class="line"><span class="comment">//        synchronized (Lazy.class)&#123;</span></span><br><span class="line"><span class="comment">//            if(instance == null)&#123;</span></span><br><span class="line"><span class="comment">//                instance = new Lazy();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            return instance;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//推荐:</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Lazy<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Lazy();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 单例模式之懒汉式 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Lazy instance = Lazy.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始可能几个线程同时判断 instance == null，需要等待进入同步代码块，是单线程的。可是后来只要有instance被 new 出来了。更多的其他线程判断 instance != null 即可直接返回 instance 对象实例，无需再等待。</p><h1 id="Lock锁解决线程安全问题"><a href="#Lock锁解决线程安全问题" class="headerlink" title="Lock锁解决线程安全问题"></a>Lock锁解决线程安全问题</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" sells: "</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window w = <span class="keyword">new</span> Window();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先new一个Lock接口的实现类ReetrantLock实例对象lock，然后手动 lock 需要同步的代码，最后手动 unlock。</p><p>而synchronized不同，它在代码块的最后就会自动解锁。</p><p>两者对比来说Lock更灵活，但容易忘记解锁。</p><h1 id="线程的其他问题"><a href="#线程的其他问题" class="headerlink" title="线程的其他问题"></a>线程的其他问题</h1><p>在运行代码的时候不难发现，线程安全是安全了，可是运行的效率也变慢了。这是因为原本多线程在同步的地方又变成了单线程了。还有可能遇到“死锁”问题。</p><h4 id="线程通信涉及的方法"><a href="#线程通信涉及的方法" class="headerlink" title="线程通信涉及的方法"></a>线程通信涉及的方法</h4><ul><li>wait（）方法：一旦执行方法，当前线程进入阻塞状态，并且释放同步监视器；</li><li>notify（）方法：按优先级唤醒一个线程；</li><li>notifyAll（）：唤醒所有线程。</li></ul><p><strong>注意事项：</strong></p><ol><li>必须在同步代码块或方法里面调用wait() 与 notify/notifyAll()方法；</li><li>三个方法的调用者必须是同步代码块或同步方法中的同步监视器；</li><li>这三个方法定义在java.lang.Object类中。</li></ol><h4 id="sleep（）和-wait（）的异同"><a href="#sleep（）和-wait（）的异同" class="headerlink" title="sleep（）和 wait（）的异同"></a>sleep（）和 wait（）的异同</h4><p>相同：都可以使当前线程进入阻塞状态；</p><p>不同：</p><ol><li>这两个方法来自不同的类分别是Thread和Object；</li><li>最主要是sleep方法没有释放锁，而wait方法释放了锁，使得其他线程可以使用同步控制块或者方法；</li><li>wait，notify和notifyAll只能在同步控制方法或者同步控制块里面使用，而sleep可以在任何地方使用（使用范围）；</li><li>sleep必须捕获异常，而wait，notify和notifyAll不需要捕获异常；</li><li>sleep是Thread类的静态方法。sleep的作用是让线程休眠制定的时间，在时间到达时恢复，也就是说sleep将在接到时间到达事件事恢复线程执行。wait是Object的方法，也就是说可以对任意一个对象调用wait方法，调用wait方法将会将调用者的线程挂起，直到其他线程调用同一个对象的notify方法才会重新激活调用者。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在多线程程序中，会出现多个线程抢占一个资源的情况，这时间有可能会造成冲突，也就是一个线程可能还没来得及将更改的资源保存，另一个线程的更改就开始了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础" scheme="http://OceanMiki.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://OceanMiki.github.io/tags/Java/"/>
    
      <category term="线程安全" scheme="http://OceanMiki.github.io/tags/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    
      <category term="同步监视器" scheme="http://OceanMiki.github.io/tags/%E5%90%8C%E6%AD%A5%E7%9B%91%E8%A7%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>经典算法之快速排序</title>
    <link href="http://oceanmiki.github.io/2020/01/23/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://oceanmiki.github.io/2020/01/23/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</id>
    <published>2020-01-23T07:01:44.000Z</published>
    <updated>2020-02-19T12:26:38.175Z</updated>
    
    <content type="html"><![CDATA[<p> 快速排序的排序效率在同为O(N*logN)的几种排序方法中效率较高，其中还运用了分治法的思想。</p><a id="more"></a><h1 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h1><ol><li>先从数列中取出一个数作为基准数。（随便选，一般可以选择第一个数）</li><li>分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</li><li>再对左右区间重复第二步，直到各区间只有一个数。</li></ol><h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td><strong>72</strong></td><td>6</td><td>57</td><td>88</td><td>60</td><td>42</td><td>83</td><td>73</td><td>48</td><td>85</td></tr></tbody></table><ol><li><p>首先，选择基准数 <strong>72</strong>（<strong>索引Index: 0</strong> ）,算法开始的目标就是在上面这个序列中找到一个位置（假设对应的索引为 <strong>k</strong> ），把 <strong>72</strong> 放到这个位置之后，以 <strong>k</strong> 为分界点，左边的数都比 <strong>72</strong> 小，右边的数都比 <strong>72</strong> 大；</p></li><li><p>再定义两个索引 <strong>high</strong> 和 <strong>low</strong> ，<strong>high</strong> 指向序列最右端的 <strong>85</strong> （即 <strong>high</strong> = <strong>9</strong>），<strong>low</strong> 指向 序列除基准数外的最左端的 <strong>6</strong> （即 <strong>low</strong> = <strong>1</strong>）；</p></li><li><p>用这两个索引从序列两端开始“探测”，<strong>high</strong>  负责找到一个比基准数 <strong>72 小</strong>  的数，<strong>low</strong> 负责找到一个比基准数 <strong>72 大</strong>  的数。移动 <strong>high  和 low</strong> 的时候必须：<strong>先从后向前找，再从前向后找</strong> （即先 <strong>high - -  再 low++</strong>）；</p></li><li><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>72</td><td>6</td><td>57</td><td><strong>88</strong></td><td>60</td><td>42</td><td>83</td><td>73</td><td><strong>48</strong></td><td>85</td></tr></tbody></table></li><li><p>如上图所示，<strong>high</strong> 先移动到 <strong>48</strong> （<strong>high</strong> = <strong>8</strong>）处停下。<strong>low</strong> 再开始移动，移动到 <strong>88</strong> （<strong>low = 3</strong>） 处停下 。<strong>high</strong> 代表它指的数要比基准数 <strong>高</strong> ，<strong>low</strong> 代表它指的数要比基准数 <strong>低</strong>。因此当他们两个遇到不满足要求的数时需要停下来进行 <strong>交换</strong> 。（索引不动）</p></li><li><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>72</td><td>6</td><td>57</td><td><strong>48</strong></td><td>60</td><td>42</td><td>83</td><td>73</td><td><strong>88</strong></td><td>85</td></tr></tbody></table></li><li><p>交换之后继续：<strong>先从后向前找，再从前向后找</strong> 。此时 <strong>high</strong> 停在了 <strong>42</strong> 处 <strong>low</strong> 还没找到比基准数大的数就与 <strong>high</strong> 相遇了。此时， <strong>high</strong> 和 <strong>low</strong> 的索引都为 <strong>5</strong> ，“探测”结束。</p></li><li><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>72</td><td>6</td><td>57</td><td>48</td><td>60</td><td><strong>42</strong></td><td>83</td><td>73</td><td>88</td><td>85</td></tr></tbody></table></li><li><p>现在把相遇位置的 <strong>42</strong> 与基准数 <strong>72</strong> 交换。</p></li><li><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td><strong>42</strong></td><td>6</td><td>57</td><td>48</td><td>60</td><td><strong>72</strong></td><td>83</td><td>73</td><td>88</td><td>85</td></tr></tbody></table></li><li><p>现在清楚为什么要让 <strong>high</strong> 先移动了。第一轮“探测”结束，可以看见基准数 <strong>72</strong> （<strong>k</strong> = <strong>5</strong>）两边（不一定对称）被划分成两个序列，左边序列的数字都比 <strong>72</strong> 小，右边序列的数字都比 <strong>72</strong> 大。</p></li><li><p>接下来用相同的方法处理这两个序列，<strong>72</strong> 左边序列处理完应该如下：（基准数： <strong>42</strong>）</p></li><li><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>6</td><td>42</td><td>57</td><td>48</td><td>60</td></tr></tbody></table></li><li><p>左边序列又被划分成两个序列，其中左边序列只有一个数字：<strong>6</strong> ，说明已经处理完了，继续处理右边序列。处理完如下：</p></li><li><table><thead><tr><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>48</td><td>57</td><td>60</td></tr></tbody></table></li><li><p>此时左右两个序列都处理完。</p></li><li><p>还有 <strong>72</strong> 右边的序列…都处理完如下图所示：</p></li><li><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>6</td><td>42</td><td>57</td><td>48</td><td>60</td><td>72</td><td>73</td><td>83</td><td>85</td><td>88</td></tr></tbody></table><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>百度百科抄的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] qsort(<span class="keyword">int</span> arr[],<span class="keyword">int</span> start,<span class="keyword">int</span> end) &#123;        </span><br><span class="line">        <span class="keyword">int</span> pivot = arr[start];        </span><br><span class="line">        <span class="keyword">int</span> low = start;        </span><br><span class="line">        <span class="keyword">int</span> high = end;        </span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;            </span><br><span class="line">            <span class="keyword">while</span> ((low &lt; high)&amp;&amp;(arr[high]&gt;pivot)) &#123;                </span><br><span class="line">                high--;            </span><br><span class="line">            &#125;            </span><br><span class="line">            <span class="keyword">while</span> ((low &lt; high)&amp;&amp;(arr[low]&lt;pivot)) &#123;                </span><br><span class="line">                low++;            </span><br><span class="line">            &#125;            </span><br><span class="line">            <span class="keyword">if</span> ((arr[low]==arr[high])&amp;&amp;(low &lt; high)) &#123;                </span><br><span class="line">                low++;            </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;                </span><br><span class="line">                <span class="keyword">int</span> temp = arr[low];                </span><br><span class="line">                arr[low] = arr[high];                </span><br><span class="line">                arr[high] = temp;            </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">if</span> (low-<span class="number">1</span>&gt;start) arr=qsort(arr,start,low-<span class="number">1</span>);        </span><br><span class="line">        <span class="keyword">if</span> (high+<span class="number">1</span>&lt;end) arr=qsort(arr,high+<span class="number">1</span>,end);        </span><br><span class="line">        <span class="keyword">return</span> (arr);    </span><br><span class="line">    &#125;    </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">122344</span>,<span class="number">4656</span>,<span class="number">34</span>,<span class="number">34</span>,<span class="number">4656</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">343</span>,<span class="number">57765</span>,<span class="number">23</span>,<span class="number">12321</span>&#125;;        </span><br><span class="line">        <span class="keyword">int</span> len = arr.length-<span class="number">1</span>;        </span><br><span class="line">        arr=qsort(arr,<span class="number">0</span>,len);        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i:arr) &#123;            </span><br><span class="line">            System.out.print(i+<span class="string">"\t"</span>);        </span><br><span class="line">        &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><pre><code># 补充看了韩老师的视频，我感觉下面这个代码可读性好点，也容易想出来：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">122344</span>,<span class="number">4656</span>,<span class="number">34</span>,<span class="number">34</span>,<span class="number">4656</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">343</span>,<span class="number">57765</span>,<span class="number">23</span>,<span class="number">12321</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> len = arr.length-<span class="number">1</span>;</span><br><span class="line">        qsort(arr,<span class="number">0</span>,len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i:arr) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span> []arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = left;</span><br><span class="line">        <span class="keyword">int</span> r = right;</span><br><span class="line">        <span class="keyword">int</span> pivot = arr[ (l + r)  / <span class="number">2</span>];<span class="comment">//选用中间值作为基准</span></span><br><span class="line">        <span class="comment">//while循环使当前选定中值（基准）的左边都比它小，右边都比它大</span></span><br><span class="line">        <span class="keyword">while</span> (l &lt; r)&#123;</span><br><span class="line">            <span class="comment">//在pivot的左边找一个比它大的</span></span><br><span class="line">            <span class="comment">//如果没有找到，说明此时pivot的左边都比它小</span></span><br><span class="line">            <span class="comment">//而且此时l == pivot对应的数组下标，后面要处理一下，避免死循环</span></span><br><span class="line">            <span class="keyword">while</span>( arr[l] &lt; pivot )&#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//在pivot的右边找一个比它小的，同上</span></span><br><span class="line">            <span class="keyword">while</span>( arr[r] &gt; pivot )&#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//这里就是前面说的处理，满足条件说明pivot左边都比它小，右边都比它大</span></span><br><span class="line">            <span class="comment">//那就不用进行下面的操作了呗，直接跳出循环</span></span><br><span class="line">            <span class="comment">//判读条件写==也行，你开心就好</span></span><br><span class="line">            <span class="keyword">if</span>(l &gt;= r)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果上面没有退出循环，这里接着就要交换一大一小的两个值</span></span><br><span class="line">            <span class="keyword">int</span> temp = arr[l];</span><br><span class="line">            arr[l] = arr[r];</span><br><span class="line">            arr[r] = temp;</span><br><span class="line">            <span class="comment">//如果交换完发现arr[l] == pivot，就将 r-- ,相当于前移</span></span><br><span class="line">            <span class="comment">//因为这里有种情况要考虑，比如数组中有三个这样的数字： 0 0 0</span></span><br><span class="line">            <span class="comment">//运行到 l 是左边的 0 ，r 是右边的0，pivot是中间的</span></span><br><span class="line">            <span class="comment">//下一次循环时 l r pivot都不会改变，l == pivot == r</span></span><br><span class="line">            <span class="comment">//又开始交换，又进入下一次循环，又开始交换。。。死循环</span></span><br><span class="line">            <span class="keyword">if</span>(arr[l] == pivot)&#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//同上</span></span><br><span class="line">            <span class="keyword">if</span>(arr[r] == pivot)&#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//上面的循环保证了此时的pivot的左边都是比它小的，右边都是比它大的</span></span><br><span class="line">        <span class="comment">//接下来可以开始准备递归，但是递归前还要加个判断</span></span><br><span class="line">        <span class="comment">//看到break的条件，发现此时有可能 l == r</span></span><br><span class="line">        <span class="comment">//，如果相等就必须将l和r错开，否则，会报栈溢出的错误</span></span><br><span class="line">        <span class="comment">//因为最后的最后，全部排好序了</span></span><br><span class="line">        <span class="comment">// l = r 其实最后就是left = right </span></span><br><span class="line">        <span class="comment">//没有这个判读，直接不停地递归</span></span><br><span class="line">        <span class="comment">//一下子就StackOverflowError</span></span><br><span class="line">        <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">            l++;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向左递归</span></span><br><span class="line">        <span class="comment">//就是递归的意思。。。都不用想，边界肯定是这样的</span></span><br><span class="line">        <span class="comment">//要想弄懂递归，首先要弄懂递归</span></span><br><span class="line">        <span class="comment">//先向左向右都行，你开心就好</span></span><br><span class="line">        <span class="comment">//如果注释掉向左递归，那么中值右边的就都是有序的，左边的就不一定了</span></span><br><span class="line">        <span class="keyword">if</span>( left &lt; r)&#123;</span><br><span class="line">            qsort(arr,left,r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向右递归，同上</span></span><br><span class="line">        <span class="keyword">if</span> ( right &gt; l)&#123;</span><br><span class="line">            qsort(arr,l,right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>·</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 快速排序的排序效率在同为O(N*logN)的几种排序方法中效率较高，其中还运用了分治法的思想。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://OceanMiki.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="http://OceanMiki.github.io/tags/Java/"/>
    
      <category term="快速排序" scheme="http://OceanMiki.github.io/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java数据结构之稀疏数组</title>
    <link href="http://oceanmiki.github.io/2020/01/23/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/"/>
    <id>http://oceanmiki.github.io/2020/01/23/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/</id>
    <published>2020-01-23T04:47:05.000Z</published>
    <updated>2020-01-27T12:16:31.079Z</updated>
    
    <content type="html"><![CDATA[<p>稀疏数组可以看做是普通数组的压缩，但是这里说的普通数组是值无效数据量远大于有效数据量的数组。</p><a id="more"></a><h1 id="稀疏数组的应用"><a href="#稀疏数组的应用" class="headerlink" title="稀疏数组的应用"></a>稀疏数组的应用</h1><p>编写一个五子棋程序的存档和读档：</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td>黑</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td>白</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>如图一个 11 x 11 的棋盘只下了两步棋子，如果用一个 11 x 11 的二维数组保存。</p><p>黑子的位置（【1,2】）存为1，白子的位置（【2，3】）存为2的话，耗费了大量的空间存空白位置。</p><p>为了节省空间，可以运用稀疏数组a[3] [3]:</p><table><thead><tr><th></th><th>row</th><th>col</th><th>val</th></tr></thead><tbody><tr><td>0</td><td>11</td><td>11</td><td>2</td></tr><tr><td>1</td><td>1</td><td>2</td><td>1</td></tr><tr><td>2</td><td>2</td><td>3</td><td>2</td></tr></tbody></table><p>上面变成 3 x 3 的一个稀疏数组：第一行 a [0] ，存储棋盘共有 11 行，11 列，除空白位置（val = 0）外，有效值有两个。其余行（a [1] 和 a[2] ）记录每个有效位置的坐标与对应值。</p><h1 id="稀疏数组与二维数组互相转化"><a href="#稀疏数组与二维数组互相转化" class="headerlink" title="稀疏数组与二维数组互相转化"></a>稀疏数组与二维数组互相转化</h1><h4 id="二维数组转稀疏数组"><a href="#二维数组转稀疏数组" class="headerlink" title="二维数组转稀疏数组"></a>二维数组转稀疏数组</h4><ol><li>遍历原始二维数组，得到有效数据总数 sum ；</li><li>创建稀疏数组 sparseArr int [sum + 1] [3] ;</li><li>遍历原始二维数组，记录有效数据坐标.</li></ol><h4 id="稀疏数组转二维数组"><a href="#稀疏数组转二维数组" class="headerlink" title="稀疏数组转二维数组"></a>稀疏数组转二维数组</h4><ol><li>读取稀疏数组第一行，创建二维数组；</li><li>读取余下的数据记录，将对应坐标的值赋给二维数组.</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 稀疏数组SparseArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArr</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建一个 11*11 二维数组</span></span><br><span class="line"><span class="keyword">int</span> chessArr[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">chessArr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">chessArr[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出棋盘</span></span><br><span class="line">System.out.println(<span class="string">"原始二维数组："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row[] : chessArr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> data : row) &#123;</span><br><span class="line">System.out.print(data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到有效数据总数</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chessArr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; chessArr.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (chessArr[i][j] != <span class="number">0</span>)</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建对应稀疏数组</span></span><br><span class="line"><span class="keyword">int</span> sparseArr[][] = <span class="keyword">new</span> <span class="keyword">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">0</span>] = chessArr.length;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">1</span>] = chessArr.length;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给稀疏数组赋值</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chessArr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; chessArr.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (chessArr[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">sparseArr[count][<span class="number">0</span>] = i;</span><br><span class="line">sparseArr[count][<span class="number">1</span>] = j;</span><br><span class="line">sparseArr[count][<span class="number">2</span>] = chessArr[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出稀疏数组的样式</span></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">"得到的稀疏数组如下："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">System.out.printf(<span class="string">"%d\t%d\t%d\t\n"</span>, sparseArr[i][<span class="number">0</span>], sparseArr[i][<span class="number">1</span>], sparseArr[i][<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//稀疏数组转化二维数组</span></span><br><span class="line"><span class="keyword">int</span> chessArr2[][] = <span class="keyword">new</span> <span class="keyword">int</span> [sparseArr[<span class="number">0</span>][<span class="number">0</span>]][sparseArr[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">chessArr2[sparseArr[i][<span class="number">0</span>]][sparseArr[i][<span class="number">1</span>]] = sparseArr[i][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复后的二维数组</span></span><br><span class="line">System.out.println(<span class="string">"恢复后的二维数组:"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row[] : chessArr2) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> data : row)&#123;</span><br><span class="line">System.out.print(data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;稀疏数组可以看做是普通数组的压缩，但是这里说的普通数组是值无效数据量远大于有效数据量的数组。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://OceanMiki.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="Java" scheme="http://OceanMiki.github.io/tags/Java/"/>
    
      <category term="数据结构" scheme="http://OceanMiki.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="稀疏数组" scheme="http://OceanMiki.github.io/tags/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>爱情公寓5之张伟拔刀吧！</title>
    <link href="http://oceanmiki.github.io/2020/01/21/%E7%88%B1%E6%83%85%E5%85%AC%E5%AF%935%E4%B9%8B%E5%BC%A0%E4%BC%9F%E6%8B%94%E5%88%80%E5%90%A7%EF%BC%81/"/>
    <id>http://oceanmiki.github.io/2020/01/21/%E7%88%B1%E6%83%85%E5%85%AC%E5%AF%935%E4%B9%8B%E5%BC%A0%E4%BC%9F%E6%8B%94%E5%88%80%E5%90%A7%EF%BC%81/</id>
    <published>2020-01-21T10:59:23.000Z</published>
    <updated>2020-01-26T13:18:21.678Z</updated>
    
    <content type="html"><![CDATA[<p>人生不就图个成果么？</p><a id="more"></a><h1 id="那个女孩"><a href="#那个女孩" class="headerlink" title="那个女孩"></a>那个女孩</h1><p>有人说：一见钟情不过是见色起意。</p><p>爱5第一集，我用1.25倍速看剧情，1.5倍速看歌舞，0.5倍速看诸葛大力！第一眼看到诸葛大力，我就想起了陶喆/卢广仲唱的一首歌：</p><p><strong>《那个女孩》</strong></p><p><em>她有 最真的笑容 最美的想法</em></p><p><em>我一百分的女孩</em></p><p><em>那个女孩 留着长长的头发</em></p><p><em>穿着白色的衬衫</em></p><p><em>很专心听我说话</em></p><p><em>她的身上（有着淡淡的玫瑰花香）</em></p><p><em>总是那样（认真分析着我的笑话）</em></p><p><em>彷佛有种（谁也不应该宠坏她的）倔强</em></p><p><em>那个女孩说男生不要太帅</em></p><p><em>但脾气不能太坏</em></p><p><em>会唱歌的男生最让她崇拜</em></p><p><em>开口笑就会停不下来</em></p><p><em>每本书只会读到一半</em></p><p>在我的思维定势中，梦中情人一直有一个统一标准：<del>24岁清纯漂亮的女大学生</del>。</p><blockquote><p>一道曼妙的身影袅袅而来，她黑发如墨，发丝如瀑，那张脸儿眉如远山，双眸如星辰，吹弹可破的脸颊桃腮白瓷，盈润娇艳的唇瓣鲜艳欲滴。</p><p>她身穿一件纯白如雪的修身宫装，如天鹅般优雅的脖颈处锁骨精美，骨瘦性感，那脖颈下胸膛处微微敞露出来的肌肤如同胭脂般的雪儿光滑，晶莹剔透，肤如凝脂。</p><p>而她的胸前，一对双峰最是饱满高耸，将薄薄的纱衣撑起，怒挺而出，虽不见一丝风采，却喷薄出令人遐想的光彩，那两座如同雪山的胸乳在纱衣笼罩之中，若隐若现，世间少有。</p><p>她的一双美腿修长，碧玉无瑕，高挑而又丰腴滚圆，莲步款款，每一步走动之间除了那摇曳的臀浪之外，还有那两条美腿在纱裙之中不断的晃荡，比那纯白纱裙还要白。</p><p>​                                                                                                                                 ——《仙子下地狱》</p></blockquote><p>看到诸葛大力后，我决定打破思维定势！然而，我却没想到我被更大的思维定势绊倒了。</p><p>就在我决定与大力私定终身之后，我发了条弹幕：诸葛大力❤冷亚麻色的？</p><p>我满心欢喜打开弹幕列表，准备接受大家的祝福。满屏都是“awsl”、“大力我可以”。</p><p>就像歌曲里面唱的那样：没想到我们会喜欢同一种女孩！</p><p><em>那个女孩，留着短短的头发</em></p><p><em>穿着美团的服装</em></p><p>得妻如此，夫复何求？</p><h1 id="夺妻之恨，不共戴天！"><a href="#夺妻之恨，不共戴天！" class="headerlink" title="夺妻之恨，不共戴天！"></a>夺妻之恨，不共戴天！</h1><p>那个男人。</p><p>张大炮、斯内克、张益达！一个复活地点在卫生间的金甲战士！</p><p>伟大CP在第十四集的时候分手，十五集就复合了？wtf！现在流行把狗骗进来杀吗？</p><p>真是人在家中坐，粮从天上来！</p><p>我以为我是弹幕之神，一边调着倍速，一边用鼠标拽着进度条往前拉。</p><p>可是，无论我把 <strong>MC.Black</strong> 的饶舌回放多少遍，终究还是到了大力喊停的那一幕。她嘟起嘴巴勾起略微弯上的弧度提醒着我，暂停键该松开了。</p><p>人生不是演戏，不是说我把视频给暂停了，大力就还是我的。</p><p>我打电话给小黑，他给我讲了一个故事：</p><blockquote><p>有个小伙喜欢女神很久了但是女神一直对他爱搭不理。</p><p>于是他去找了大师，他问道：大师我喜欢一个女孩子，但她不喜欢我也不拒绝我。每当我要放弃的时候她都会给我一口糖吃，大师我现在到底要怎么办啊？</p><p>这时候，大师拿起了一个杯子接满了开水给小伙子，小伙子接过去，一下烫的把杯子摔碎在了地上。</p><p>大师道：烫吧？烫的时候放手就对了。</p></blockquote><p>其实，这个世界没有什么是放不下的。痛了，你自然就放下了。</p><p>那个女孩，终究还是要回归到别人的怀抱…</p><p>为了不放下心爱的大力，我又找到了故事的后续：</p><blockquote><p>小伙子若有所思说道：大师我能换个杯子吗？</p><p>大师点了点头。</p><p>这时候小伙子从自己背包又拿出一个杯子，接满了开水，但这次他烫的手都快熟了也没有放手。</p><p>大师惊叹不已问道：不烫手么？</p><p>小伙答：烫。</p><p>大师又问：何故不放手？</p><p>小伙答：这水杯是她送的。</p><p>大师转过头幽幽叹道：舔狗真的牛批。</p></blockquote><p>如果不是真的喜欢，谁又愿意当舔狗呢？</p><p>想到这里，我更加坚定了自己的内心，正式决定加入 <strong>抢夺大力联盟</strong> ！</p><ul><li>长夜将至，大力将失，我从今开始守望，至死方休。</li><li>我将不夜夜笙歌、不醉生梦死、不玩物丧志。</li><li>我将不戴宝冠，不争荣宠。</li><li>我将尽忠职守，生死於斯。</li><li>我是黑暗中的利剑，长城上的守卫。</li><li>我是抵御寒冷的烈焰，破晓时分的光线，唤醒眠者的号角，守护王国的坚盾。</li><li>我将生命与荣耀献给 <strong>抢夺大力联盟</strong> 今夜如此，夜夜皆然。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生不就图个成果么？&lt;/p&gt;
    
    </summary>
    
    
      <category term="电视剧" scheme="http://OceanMiki.github.io/categories/%E7%94%B5%E8%A7%86%E5%89%A7/"/>
    
    
      <category term="爱情公寓" scheme="http://OceanMiki.github.io/tags/%E7%88%B1%E6%83%85%E5%85%AC%E5%AF%93/"/>
    
      <category term="诸葛大力" scheme="http://OceanMiki.github.io/tags/%E8%AF%B8%E8%91%9B%E5%A4%A7%E5%8A%9B/"/>
    
  </entry>
  
</feed>
